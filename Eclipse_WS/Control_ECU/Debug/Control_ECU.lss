
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000023fe  00002492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800078  00800078  000024aa  2**0
                  ALLOC
  3 .stab         00002880  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000148b  00000000  00000000  00004d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000062f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a135  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 06 	call	0xd8a	; 0xd8a <main>
      8a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 78 00 	lds	r24, 0x0078
     b74:	90 91 79 00 	lds	r25, 0x0079
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application  */
		g_callBackPtr();
     b7c:	e0 91 78 00 	lds	r30, 0x0078
     b80:	f0 91 79 00 	lds	r31, 0x0079
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     bd6:	80 91 78 00 	lds	r24, 0x0078
     bda:	90 91 79 00 	lds	r25, 0x0079
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_9+0x40>
	{
		/* Call the Call Back function in the application  */
		g_callBackPtr();
     be2:	e0 91 78 00 	lds	r30, 0x0078
     be6:	f0 91 79 00 	lds	r31, 0x0079
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer1_init>:

/*
 * Description : Function to initialize the Timer1 driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer1_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	/* Timer1 operates in non PWM Mode */
	TCCR1A|=(1<<FOC1A)|(1<<FOC1B);
     c20:	af e4       	ldi	r26, 0x4F	; 79
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ef e4       	ldi	r30, 0x4F	; 79
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8c 60       	ori	r24, 0x0C	; 12
     c2c:	8c 93       	st	X, r24
	/* Set to required mode in the configurations*/
	TCCR1B = (TCCR1B&0xF7)|(Config_Ptr->mode <<3);
     c2e:	ae e4       	ldi	r26, 0x4E	; 78
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ee e4       	ldi	r30, 0x4E	; 78
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	28 2f       	mov	r18, r24
     c3a:	27 7f       	andi	r18, 0xF7	; 247
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	85 81       	ldd	r24, Z+5	; 0x05
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	82 2b       	or	r24, r18
     c54:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B&0xF8)|(Config_Ptr->prescaler);
     c56:	ae e4       	ldi	r26, 0x4E	; 78
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ee e4       	ldi	r30, 0x4E	; 78
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	98 2f       	mov	r25, r24
     c62:	98 7f       	andi	r25, 0xF8	; 248
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	84 81       	ldd	r24, Z+4	; 0x04
     c6a:	89 2b       	or	r24, r25
     c6c:	8c 93       	st	X, r24
	/* Initial Value for Timer1 */
	TCNT1=Config_Ptr->initial_value;
     c6e:	ac e4       	ldi	r26, 0x4C	; 76
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e9 81       	ldd	r30, Y+1	; 0x01
     c74:	fa 81       	ldd	r31, Y+2	; 0x02
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	9c 93       	st	X, r25
     c7e:	8e 93       	st	-X, r24
	if((Config_Ptr->mode)==Overflow_Mode)
     c80:	e9 81       	ldd	r30, Y+1	; 0x01
     c82:	fa 81       	ldd	r31, Y+2	; 0x02
     c84:	85 81       	ldd	r24, Z+5	; 0x05
     c86:	88 23       	and	r24, r24
     c88:	41 f4       	brne	.+16     	; 0xc9a <Timer1_init+0x88>
		 * 3. Normal Mode COM1A0=0 & COM1A1=0
		 * 4. Normal Mode COM1B0=0 & COM1B1=0
		 */

		/*Timer1 Overflow Interrupt Enable*/
		TIMSK|=(1<<TOIE1);
     c8a:	a9 e5       	ldi	r26, 0x59	; 89
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e9 e5       	ldi	r30, 0x59	; 89
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	84 60       	ori	r24, 0x04	; 4
     c96:	8c 93       	st	X, r24
     c98:	1c c0       	rjmp	.+56     	; 0xcd2 <Timer1_init+0xc0>

	}


	else if((Config_Ptr->mode)==Compare_Mode)
     c9a:	e9 81       	ldd	r30, Y+1	; 0x01
     c9c:	fa 81       	ldd	r31, Y+2	; 0x02
     c9e:	85 81       	ldd	r24, Z+5	; 0x05
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	b9 f4       	brne	.+46     	; 0xcd2 <Timer1_init+0xc0>
		 * 4. Normal Mode COM1B0=0 & COM1B1=0
		 */


		/* Timer1 operates in CTC Mode */
		TCCR1B|=(1<<WGM12);
     ca4:	ae e4       	ldi	r26, 0x4E	; 78
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ee e4       	ldi	r30, 0x4E	; 78
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 60       	ori	r24, 0x08	; 8
     cb0:	8c 93       	st	X, r24


		/*Output Compare Register contain a 16-bit value that is continuously compared with the
	      counter value (TCNT1)*/

		OCR1A=Config_Ptr->compare_value;
     cb2:	aa e4       	ldi	r26, 0x4A	; 74
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e9 81       	ldd	r30, Y+1	; 0x01
     cb8:	fa 81       	ldd	r31, Y+2	; 0x02
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24

		/*Timer1 Compare Mode Interrupt Enable*/
		TIMSK|=(1<<OCIE1A);
     cc4:	a9 e5       	ldi	r26, 0x59	; 89
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e9 e5       	ldi	r30, 0x59	; 89
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 61       	ori	r24, 0x10	; 16
     cd0:	8c 93       	st	X, r24
	}
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <Timer1_deInit>:
/* Function to de-initialize timer1*/
void Timer1_deInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	/*Clear all the registers values and disable interrupts' enable*/
	TCCR1A=0;
     ce4:	ef e4       	ldi	r30, 0x4F	; 79
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	10 82       	st	Z, r1
	TCCR1B=0;
     cea:	ee e4       	ldi	r30, 0x4E	; 78
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	10 82       	st	Z, r1
	TCNT1=0;
     cf0:	ec e4       	ldi	r30, 0x4C	; 76
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	11 82       	std	Z+1, r1	; 0x01
     cf6:	10 82       	st	Z, r1
	OCR1A=0;
     cf8:	ea e4       	ldi	r30, 0x4A	; 74
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	11 82       	std	Z+1, r1	; 0x01
     cfe:	10 82       	st	Z, r1
	TIMSK&=0xC3;
     d00:	a9 e5       	ldi	r26, 0x59	; 89
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e9 e5       	ldi	r30, 0x59	; 89
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	83 7c       	andi	r24, 0xC3	; 195
     d0c:	8c 93       	st	X, r24

}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	00 d0       	rcall	.+0      	; 0xd1a <Timer1_setCallBack+0x6>
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr=a_ptr;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	90 93 79 00 	sts	0x0079, r25
     d2a:	80 93 78 00 	sts	0x0078, r24
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <Buzzer_Init>:
/*
 * Description :
 * Functional responsible for assigning buzzer pin as output pin
 */
void Buzzer_Init()
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	67 e0       	ldi	r22, 0x07	; 7
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW );
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	67 e0       	ldi	r22, 0x07	; 7
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
}
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <Buzzer_on>:
/*
 * Description :
 * Functional responsible for turning on the buzzer
 */
void Buzzer_on()
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH );
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	67 e0       	ldi	r22, 0x07	; 7
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <Buzzer_off>:
/*
 * Description :
 * Functional responsible for turning on the buzzer
 */
void Buzzer_off()
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW );
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	67 e0       	ldi	r22, 0x07	; 7
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <main>:

/*******************************************************************************
 *                      Main Function                         				   *
 *******************************************************************************/
int main(void)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	aa 97       	sbiw	r28, 0x2a	; 42
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7); /*Enabling Global interrupts enable*/
     d9e:	af e5       	ldi	r26, 0x5F	; 95
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ef e5       	ldi	r30, 0x5F	; 95
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	8c 93       	st	X, r24
	UART_ConfigType UART_Config = {8,1,UART_STOP_1BIT_SELECT,9600}; /*UART configurations*/
     dac:	9e 01       	movw	r18, r28
     dae:	2e 5e       	subi	r18, 0xEE	; 238
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	3a a3       	std	Y+34, r19	; 0x22
     db4:	29 a3       	std	Y+33, r18	; 0x21
     db6:	8e e6       	ldi	r24, 0x6E	; 110
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9c a3       	std	Y+36, r25	; 0x24
     dbc:	8b a3       	std	Y+35, r24	; 0x23
     dbe:	97 e0       	ldi	r25, 0x07	; 7
     dc0:	9d a3       	std	Y+37, r25	; 0x25
     dc2:	eb a1       	ldd	r30, Y+35	; 0x23
     dc4:	fc a1       	ldd	r31, Y+36	; 0x24
     dc6:	00 80       	ld	r0, Z
     dc8:	2b a1       	ldd	r18, Y+35	; 0x23
     dca:	3c a1       	ldd	r19, Y+36	; 0x24
     dcc:	2f 5f       	subi	r18, 0xFF	; 255
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	3c a3       	std	Y+36, r19	; 0x24
     dd2:	2b a3       	std	Y+35, r18	; 0x23
     dd4:	e9 a1       	ldd	r30, Y+33	; 0x21
     dd6:	fa a1       	ldd	r31, Y+34	; 0x22
     dd8:	00 82       	st	Z, r0
     dda:	29 a1       	ldd	r18, Y+33	; 0x21
     ddc:	3a a1       	ldd	r19, Y+34	; 0x22
     dde:	2f 5f       	subi	r18, 0xFF	; 255
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	3a a3       	std	Y+34, r19	; 0x22
     de4:	29 a3       	std	Y+33, r18	; 0x21
     de6:	3d a1       	ldd	r19, Y+37	; 0x25
     de8:	31 50       	subi	r19, 0x01	; 1
     dea:	3d a3       	std	Y+37, r19	; 0x25
     dec:	8d a1       	ldd	r24, Y+37	; 0x25
     dee:	88 23       	and	r24, r24
     df0:	41 f7       	brne	.-48     	; 0xdc2 <main+0x38>
	Timer1_ConfigType  Config_Ptr = {0,0,Prescaler_1024,Overflow_Mode};/*Timer1 Configurations*/
     df2:	fe 01       	movw	r30, r28
     df4:	79 96       	adiw	r30, 0x19	; 25
     df6:	ff a3       	std	Y+39, r31	; 0x27
     df8:	ee a3       	std	Y+38, r30	; 0x26
     dfa:	28 e6       	ldi	r18, 0x68	; 104
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	39 a7       	std	Y+41, r19	; 0x29
     e00:	28 a7       	std	Y+40, r18	; 0x28
     e02:	36 e0       	ldi	r19, 0x06	; 6
     e04:	3a a7       	std	Y+42, r19	; 0x2a
     e06:	e8 a5       	ldd	r30, Y+40	; 0x28
     e08:	f9 a5       	ldd	r31, Y+41	; 0x29
     e0a:	00 80       	ld	r0, Z
     e0c:	28 a5       	ldd	r18, Y+40	; 0x28
     e0e:	39 a5       	ldd	r19, Y+41	; 0x29
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	39 a7       	std	Y+41, r19	; 0x29
     e16:	28 a7       	std	Y+40, r18	; 0x28
     e18:	ee a1       	ldd	r30, Y+38	; 0x26
     e1a:	ff a1       	ldd	r31, Y+39	; 0x27
     e1c:	00 82       	st	Z, r0
     e1e:	2e a1       	ldd	r18, Y+38	; 0x26
     e20:	3f a1       	ldd	r19, Y+39	; 0x27
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	3f a3       	std	Y+39, r19	; 0x27
     e28:	2e a3       	std	Y+38, r18	; 0x26
     e2a:	3a a5       	ldd	r19, Y+42	; 0x2a
     e2c:	31 50       	subi	r19, 0x01	; 1
     e2e:	3a a7       	std	Y+42, r19	; 0x2a
     e30:	8a a5       	ldd	r24, Y+42	; 0x2a
     e32:	88 23       	and	r24, r24
     e34:	41 f7       	brne	.-48     	; 0xe06 <main+0x7c>
	UART_init(&UART_Config); /*Initializing UART*/
     e36:	ce 01       	movw	r24, r28
     e38:	42 96       	adiw	r24, 0x12	; 18
     e3a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_init>
	DcMotor_Init(); /* Initializing DC Motor (I/O pins)*/
     e3e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <DcMotor_Init>
	Buzzer_Init(); /* Initializing Buzzer (I/O pins)*/
     e42:	0e 94 9c 06 	call	0xd38	; 0xd38 <Buzzer_Init>
	EEPROM_init(); /*Initializing TWI for interacting with EEPROM*/
     e46:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_init>
	while(1)
	{
		switch(application_sequence_MC2)
     e4a:	80 91 7a 00 	lds	r24, 0x007A
     e4e:	e8 2f       	mov	r30, r24
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	f8 a3       	std	Y+32, r31	; 0x20
     e54:	ef 8f       	std	Y+31, r30	; 0x1f
     e56:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e58:	38 a1       	ldd	r19, Y+32	; 0x20
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <main+0xd8>
     e60:	41 c0       	rjmp	.+130    	; 0xee4 <main+0x15a>
     e62:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e64:	98 a1       	ldd	r25, Y+32	; 0x20
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	54 f4       	brge	.+20     	; 0xe80 <main+0xf6>
     e6c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     e6e:	f8 a1       	ldd	r31, Y+32	; 0x20
     e70:	30 97       	sbiw	r30, 0x00	; 0
     e72:	91 f0       	breq	.+36     	; 0xe98 <main+0x10e>
     e74:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e76:	38 a1       	ldd	r19, Y+32	; 0x20
     e78:	21 30       	cpi	r18, 0x01	; 1
     e7a:	31 05       	cpc	r19, r1
     e7c:	d9 f0       	breq	.+54     	; 0xeb4 <main+0x12a>
     e7e:	e5 cf       	rjmp	.-54     	; 0xe4a <main+0xc0>
     e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e82:	98 a1       	ldd	r25, Y+32	; 0x20
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	b9 f1       	breq	.+110    	; 0xef8 <main+0x16e>
     e8a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     e8c:	f8 a1       	ldd	r31, Y+32	; 0x20
     e8e:	e4 30       	cpi	r30, 0x04	; 4
     e90:	f1 05       	cpc	r31, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <main+0x10c>
     e94:	98 c0       	rjmp	.+304    	; 0xfc6 <main+0x23c>
     e96:	d9 cf       	rjmp	.-78     	; 0xe4a <main+0xc0>
		{
		case RECEIVING_ENTERED_PASSWORDS:
		{
			receive_Password(&g_ptr1);/*Receiving the entered password from HMI_ECU*/
     e98:	8b e7       	ldi	r24, 0x7B	; 123
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 91 08 	call	0x1122	; 0x1122 <receive_Password>
			receive_Password(&g_ptr2);/*Receiving the re-entered password from HMI_ECU*/
     ea0:	85 e8       	ldi	r24, 0x85	; 133
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 91 08 	call	0x1122	; 0x1122 <receive_Password>
			application_sequence_MC2++; /* Jump to the next step (Checking Step)*/
     ea8:	80 91 7a 00 	lds	r24, 0x007A
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 93 7a 00 	sts	0x007A, r24
     eb2:	cb cf       	rjmp	.-106    	; 0xe4a <main+0xc0>
			break;
		}
		case CHECK_PASSWORDS_MATCHING :
		{
			uint8 current_state=check_Password(&g_ptr1,&g_ptr2); /*Check if the two passwords sent are the same*/
     eb4:	8b e7       	ldi	r24, 0x7B	; 123
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	25 e8       	ldi	r18, 0x85	; 133
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	b9 01       	movw	r22, r18
     ebe:	0e 94 c1 08 	call	0x1182	; 0x1182 <check_Password>
     ec2:	89 8b       	std	Y+17, r24	; 0x11
			if(current_state == MATCHED) /*Two passwords are matched*/
     ec4:	89 89       	ldd	r24, Y+17	; 0x11
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	49 f4       	brne	.+18     	; 0xedc <main+0x152>
			{
				sendByte(MATCHED); /*Send to HMI_ECU that they're matched*/
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
				application_sequence_MC2++; /*Jump to the next step*/
     ed0:	80 91 7a 00 	lds	r24, 0x007A
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	80 93 7a 00 	sts	0x007A, r24
     eda:	b7 cf       	rjmp	.-146    	; 0xe4a <main+0xc0>
			}
			else
			{
				sendByte(UN_MATCHED);/*Send to HMI_ECU that they're not matched*/
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
     ee2:	b3 cf       	rjmp	.-154    	; 0xe4a <main+0xc0>
			}
			break;
		}
		case SAVE_PASSWORDS:
		{
			save_Password(&g_ptr1); /*Save password entered by the user*/
     ee4:	8b e7       	ldi	r24, 0x7B	; 123
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 bc 09 	call	0x1378	; 0x1378 <save_Password>
			application_sequence_MC2++; /*Jumps to the next step*/
     eec:	80 91 7a 00 	lds	r24, 0x007A
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	80 93 7a 00 	sts	0x007A, r24
     ef6:	a9 cf       	rjmp	.-174    	; 0xe4a <main+0xc0>
			break;
		}
		case RECEIVE_AND_CHECK_WITH_EEPROM:
		{
			receive_Password(&g_ptr1); /*Receive the password entered by the user (User's old password)*/
     ef8:	8b e7       	ldi	r24, 0x7B	; 123
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 91 08 	call	0x1122	; 0x1122 <receive_Password>
			uint8 current_state=Compare_with_saved_password(&g_ptr1, &g_ptr2); /*Compare it with the password saved in the EEPROM*/
     f00:	8b e7       	ldi	r24, 0x7B	; 123
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	25 e8       	ldi	r18, 0x85	; 133
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	b9 01       	movw	r22, r18
     f0a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <Compare_with_saved_password>
     f0e:	88 8b       	std	Y+16, r24	; 0x10
			if(current_state == MATCHED)
     f10:	88 89       	ldd	r24, Y+16	; 0x10
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	b1 f4       	brne	.+44     	; 0xf42 <main+0x1b8>
			{
				sendByte(MATCHED);/*Send that the password matched with the one saved in the EEPROM*/
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
				if(recieveByte()=='+')
     f1c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <recieveByte>
     f20:	8b 32       	cpi	r24, 0x2B	; 43
     f22:	49 f4       	brne	.+18     	; 0xf36 <main+0x1ac>
				{
					application_sequence_MC2++;/*Jump to next step to operate the motor*/
     f24:	80 91 7a 00 	lds	r24, 0x007A
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	80 93 7a 00 	sts	0x007A, r24
					sendByte(0x04);
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
     f34:	8a cf       	rjmp	.-236    	; 0xe4a <main+0xc0>
					 */

				}
				else
				{
					sendByte(0x00);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
					/*
					 * Let application sequence variable in the HMI go to the step
					 * where the LCD displays the required messages for the user to change his password
					 */
					application_sequence_MC2=0;
     f3c:	10 92 7a 00 	sts	0x007A, r1
     f40:	84 cf       	rjmp	.-248    	; 0xe4a <main+0xc0>

			}
			else
			{
				/*Send to HMI_ECU that the passwords is not matched with the one in the EEPROM*/
				sendByte(UN_MATCHED);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
				 * the function which is responsible for the choice he chose (Open Door/Change password)
				 * else
				 * Activate the Buzzer and block the system for 1 minute
				 * After the 1 min ends return to case 3
				 */
				for(i=0;i<2;i++)
     f48:	1f 86       	std	Y+15, r1	; 0x0f
     f4a:	1a c0       	rjmp	.+52     	; 0xf80 <main+0x1f6>
				{
					receive_Password(&g_ptr1);
     f4c:	8b e7       	ldi	r24, 0x7B	; 123
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 91 08 	call	0x1122	; 0x1122 <receive_Password>
					if(Compare_with_saved_password(&g_ptr1, &g_ptr2))
     f54:	8b e7       	ldi	r24, 0x7B	; 123
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	25 e8       	ldi	r18, 0x85	; 133
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	b9 01       	movw	r22, r18
     f5e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <Compare_with_saved_password>
     f62:	88 23       	and	r24, r24
     f64:	39 f0       	breq	.+14     	; 0xf74 <main+0x1ea>
					{
						sendByte(MATCHED);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
						application_sequence_MC2=3;
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	80 93 7a 00 	sts	0x007A, r24
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <main+0x1fc>
						break;

					}
					else
					{
						sendByte(UN_MATCHED);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <sendByte>
				 * the function which is responsible for the choice he chose (Open Door/Change password)
				 * else
				 * Activate the Buzzer and block the system for 1 minute
				 * After the 1 min ends return to case 3
				 */
				for(i=0;i<2;i++)
     f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	8f 87       	std	Y+15, r24	; 0x0f
     f80:	8f 85       	ldd	r24, Y+15	; 0x0f
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	18 f3       	brcs	.-58     	; 0xf4c <main+0x1c2>
					else
					{
						sendByte(UN_MATCHED);
					}
				}
				if(i==2)
     f86:	8f 85       	ldd	r24, Y+15	; 0x0f
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f0       	breq	.+2      	; 0xf8e <main+0x204>
     f8c:	5e cf       	rjmp	.-324    	; 0xe4a <main+0xc0>
				{
					timer1_SetRequiredCallBack(BUZZER); /*Set Timer 1 callback to buzzerTime function*/
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	0e 94 a3 0a 	call	0x1546	; 0x1546 <timer1_SetRequiredCallBack>
					Timer1_init(& Config_Ptr); /*Initialize Timer 1*/
     f94:	ce 01       	movw	r24, r28
     f96:	49 96       	adiw	r24, 0x19	; 25
     f98:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <main+0x218>
					while(g_tick_buzzer < 8)/*Operate the buzzer for 1 min*/
					{
						Buzzer_on();
     f9e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <Buzzer_on>
				}
				if(i==2)
				{
					timer1_SetRequiredCallBack(BUZZER); /*Set Timer 1 callback to buzzerTime function*/
					Timer1_init(& Config_Ptr); /*Initialize Timer 1*/
					while(g_tick_buzzer < 8)/*Operate the buzzer for 1 min*/
     fa2:	80 91 90 00 	lds	r24, 0x0090
     fa6:	88 30       	cpi	r24, 0x08	; 8
     fa8:	d0 f3       	brcs	.-12     	; 0xf9e <main+0x214>
					{
						Buzzer_on();
					}
					if(g_tick_buzzer==8)/*Turn off the buzzer after the 1 min ends*/
     faa:	80 91 90 00 	lds	r24, 0x0090
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	31 f4       	brne	.+12     	; 0xfbe <main+0x234>
					{
						Buzzer_off();
     fb2:	0e 94 b9 06 	call	0xd72	; 0xd72 <Buzzer_off>
						Timer1_deInit();
     fb6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer1_deInit>
						g_tick_buzzer=0;
     fba:	10 92 90 00 	sts	0x0090, r1

					}
					/*Return to case main options control (Case 3)*/
					application_sequence_MC2=3;
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	80 93 7a 00 	sts	0x007A, r24
     fc4:	42 cf       	rjmp	.-380    	; 0xe4a <main+0xc0>
			}
			break;
		}
		case OPEN_DOOR:
		{
			timer1_SetRequiredCallBack(MOTOR);/*Set Timer 1 callback to motorTime function*/
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <timer1_SetRequiredCallBack>
			Timer1_init(& Config_Ptr);/*Initialize Timer 1*/
     fcc:	ce 01       	movw	r24, r28
     fce:	49 96       	adiw	r24, 0x19	; 25
     fd0:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <main+0x254>
			while(g_tick_motor<2) /*Turn on the motor clockwise for 15 sec*/
			{
				DcMotor_Rotate(CW, 25);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	69 e1       	ldi	r22, 0x19	; 25
     fda:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DcMotor_Rotate>
		}
		case OPEN_DOOR:
		{
			timer1_SetRequiredCallBack(MOTOR);/*Set Timer 1 callback to motorTime function*/
			Timer1_init(& Config_Ptr);/*Initialize Timer 1*/
			while(g_tick_motor<2) /*Turn on the motor clockwise for 15 sec*/
     fde:	80 91 8f 00 	lds	r24, 0x008F
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	c0 f3       	brcs	.-16     	; 0xfd6 <main+0x24c>
			{
				DcMotor_Rotate(CW, 25);
			}
			if(g_tick_motor == 2)/*Turn off the motor for 3 sec*/
     fe6:	80 91 8f 00 	lds	r24, 0x008F
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	09 f0       	breq	.+2      	; 0xff0 <main+0x266>
     fee:	81 c0       	rjmp	.+258    	; 0x10f2 <main+0x368>
			{
				DcMotor_Rotate(STOP, 0);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DcMotor_Rotate>
				Timer1_deInit();
     ff8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer1_deInit>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e8       	ldi	r25, 0x80	; 128
    1000:	ab e3       	ldi	r26, 0x3B	; 59
    1002:	b5 e4       	ldi	r27, 0x45	; 69
    1004:	8b 87       	std	Y+11, r24	; 0x0b
    1006:	9c 87       	std	Y+12, r25	; 0x0c
    1008:	ad 87       	std	Y+13, r26	; 0x0d
    100a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100c:	6b 85       	ldd	r22, Y+11	; 0x0b
    100e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1010:	8d 85       	ldd	r24, Y+13	; 0x0d
    1012:	9e 85       	ldd	r25, Y+14	; 0x0e
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a ef       	ldi	r20, 0xFA	; 250
    101a:	54 e4       	ldi	r21, 0x44	; 68
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	8f 83       	std	Y+7, r24	; 0x07
    1026:	98 87       	std	Y+8, r25	; 0x08
    1028:	a9 87       	std	Y+9, r26	; 0x09
    102a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <main+0x2c4>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	3f c0       	rjmp	.+126    	; 0x10cc <main+0x342>
	else if (__tmp > 65535)
    104e:	6f 81       	ldd	r22, Y+7	; 0x07
    1050:	78 85       	ldd	r23, Y+8	; 0x08
    1052:	89 85       	ldd	r24, Y+9	; 0x09
    1054:	9a 85       	ldd	r25, Y+10	; 0x0a
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1062:	18 16       	cp	r1, r24
    1064:	4c f5       	brge	.+82     	; 0x10b8 <main+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1066:	6b 85       	ldd	r22, Y+11	; 0x0b
    1068:	7c 85       	ldd	r23, Y+12	; 0x0c
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <main+0x324>
    1090:	88 ec       	ldi	r24, 0xC8	; 200
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <main+0x312>
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <main+0x306>
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <main+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <main+0x34e>
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(3000);
				Timer1_init(&Config_Ptr);
    10e0:	ce 01       	movw	r24, r28
    10e2:	49 96       	adiw	r24, 0x19	; 25
    10e4:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <main+0x368>
			}
			while(g_tick_motor>= 2 && g_tick_motor < 4)/*Turn on the motor anti-clockwise for 15 sec*/
			{
				DcMotor_Rotate(A_CW, 25);
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	69 e1       	ldi	r22, 0x19	; 25
    10ee:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DcMotor_Rotate>
				DcMotor_Rotate(STOP, 0);
				Timer1_deInit();
				_delay_ms(3000);
				Timer1_init(&Config_Ptr);
			}
			while(g_tick_motor>= 2 && g_tick_motor < 4)/*Turn on the motor anti-clockwise for 15 sec*/
    10f2:	80 91 8f 00 	lds	r24, 0x008F
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <main+0x378>
    10fa:	80 91 8f 00 	lds	r24, 0x008F
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	a0 f3       	brcs	.-24     	; 0x10ea <main+0x360>
			{
				DcMotor_Rotate(A_CW, 25);
			}
			if(g_tick_motor==4) /*Turn off the motor*/
    1102:	80 91 8f 00 	lds	r24, 0x008F
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	41 f4       	brne	.+16     	; 0x111a <main+0x390>
			{
				DcMotor_Rotate(STOP, 0);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DcMotor_Rotate>
				Timer1_deInit();
    1112:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer1_deInit>
				g_tick_motor=0;
    1116:	10 92 8f 00 	sts	0x008F, r1
			}
			application_sequence_MC2=3; /*Return to main options control*/
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	80 93 7a 00 	sts	0x007A, r24
    1120:	94 ce       	rjmp	.-728    	; 0xe4a <main+0xc0>

00001122 <receive_Password>:
 * Description :
 * Functional responsible for :
 * Receiving Password entered by the user from HMI_ECU
 */
void receive_Password(uint8* password_holder)
{
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <receive_Password+0xa>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	9b 83       	std	Y+3, r25	; 0x03
    1134:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1136:	19 82       	std	Y+1, r1	; 0x01
	while(UART_recieveByte()!=READY);
    1138:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    113c:	8f 3f       	cpi	r24, 0xFF	; 255
    113e:	e1 f7       	brne	.-8      	; 0x1138 <receive_Password+0x16>
	UART_sendByte(READY);
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <receive_Password+0x44>
	while(i<PASSWORD_SIZE)
	{
		password_holder[i]=UART_recieveByte();
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
    1152:	8c 01       	movw	r16, r24
    1154:	02 0f       	add	r16, r18
    1156:	13 1f       	adc	r17, r19
    1158:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    115c:	f8 01       	movw	r30, r16
    115e:	80 83       	st	Z, r24
		i++;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	89 83       	std	Y+1, r24	; 0x01
void receive_Password(uint8* password_holder)
{
	uint8 i=0;
	while(UART_recieveByte()!=READY);
	UART_sendByte(READY);
	while(i<PASSWORD_SIZE)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	85 30       	cpi	r24, 0x05	; 5
    116a:	70 f3       	brcs	.-36     	; 0x1148 <receive_Password+0x26>
	{
		password_holder[i]=UART_recieveByte();
		i++;

	}
	UART_sendByte(DONE);
    116c:	8e ef       	ldi	r24, 0xFE	; 254
    116e:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <check_Password>:
 * 1. Taking two passwords (entered/re-entered) entered by the user and sent through Receive_password function
 * 2. Check if both are the same
 * 3. return if they are matched or not
 */
uint8 check_Password(uint8 *Password_array1,uint8 *Password_array2)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <check_Password+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <check_Password+0x8>
    118a:	00 d0       	rcall	.+0      	; 0x118c <check_Password+0xa>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	9b 83       	std	Y+3, r25	; 0x03
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	7d 83       	std	Y+5, r23	; 0x05
    1196:	6c 83       	std	Y+4, r22	; 0x04

	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++)
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	19 c0       	rjmp	.+50     	; 0x11ce <check_Password+0x4c>
	{
		if(Password_array1[i]!=Password_array2[i])
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	fc 01       	movw	r30, r24
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	40 81       	ld	r20, Z
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	fc 01       	movw	r30, r24
    11ba:	e2 0f       	add	r30, r18
    11bc:	f3 1f       	adc	r31, r19
    11be:	80 81       	ld	r24, Z
    11c0:	48 17       	cp	r20, r24
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <check_Password+0x46>
		{
			return UN_MATCHED;
    11c4:	1e 82       	std	Y+6, r1	; 0x06
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <check_Password+0x56>
 */
uint8 check_Password(uint8 *Password_array1,uint8 *Password_array2)
{

	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	85 30       	cpi	r24, 0x05	; 5
    11d2:	20 f3       	brcs	.-56     	; 0x119c <check_Password+0x1a>
		{
			return UN_MATCHED;
		}

	}
	return MATCHED;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	8e 83       	std	Y+6, r24	; 0x06
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06


}
    11da:	26 96       	adiw	r28, 0x06	; 6
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <Compare_with_saved_password>:
 * Description :
 * Functional responsible for :
 * Comparing the password entered by the user with the password saved in the EEPROM (Entered by the user before)
 */
uint8 Compare_with_saved_password(uint8*Password_array1,uint8*Password_array2)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	64 97       	sbiw	r28, 0x14	; 20
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	99 8b       	std	Y+17, r25	; 0x11
    1202:	88 8b       	std	Y+16, r24	; 0x10
    1204:	7b 8b       	std	Y+19, r23	; 0x13
    1206:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;

	for(i=0;i<PASSWORD_SIZE;i++)
    1208:	1f 86       	std	Y+15, r1	; 0x0f
    120a:	88 c0       	rjmp	.+272    	; 0x131c <Compare_with_saved_password+0x130>
	{
		EEPROM_readByte(0x0000+i,Password_array2[i]);
    120c:	8f 85       	ldd	r24, Y+15	; 0x0f
    120e:	48 2f       	mov	r20, r24
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	8f 85       	ldd	r24, Y+15	; 0x0f
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8a 89       	ldd	r24, Y+18	; 0x12
    121a:	9b 89       	ldd	r25, Y+19	; 0x13
    121c:	fc 01       	movw	r30, r24
    121e:	e2 0f       	add	r30, r18
    1220:	f3 1f       	adc	r31, r19
    1222:	80 81       	ld	r24, Z
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c 01       	movw	r18, r24
    122a:	ca 01       	movw	r24, r20
    122c:	b9 01       	movw	r22, r18
    122e:	0e 94 40 0b 	call	0x1680	; 0x1680 <EEPROM_readByte>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 e2       	ldi	r26, 0x20	; 32
    1238:	b1 e4       	ldi	r27, 0x41	; 65
    123a:	8b 87       	std	Y+11, r24	; 0x0b
    123c:	9c 87       	std	Y+12, r25	; 0x0c
    123e:	ad 87       	std	Y+13, r26	; 0x0d
    1240:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	4a ef       	ldi	r20, 0xFA	; 250
    1250:	54 e4       	ldi	r21, 0x44	; 68
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8f 83       	std	Y+7, r24	; 0x07
    125c:	98 87       	std	Y+8, r25	; 0x08
    125e:	a9 87       	std	Y+9, r26	; 0x09
    1260:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1276:	88 23       	and	r24, r24
    1278:	2c f4       	brge	.+10     	; 0x1284 <Compare_with_saved_password+0x98>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	3f c0       	rjmp	.+126    	; 0x1302 <Compare_with_saved_password+0x116>
	else if (__tmp > 65535)
    1284:	6f 81       	ldd	r22, Y+7	; 0x07
    1286:	78 85       	ldd	r23, Y+8	; 0x08
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1298:	18 16       	cp	r1, r24
    129a:	4c f5       	brge	.+82     	; 0x12ee <Compare_with_saved_password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <Compare_with_saved_password+0xf8>
    12c6:	88 ec       	ldi	r24, 0xC8	; 200
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	8b 83       	std	Y+3, r24	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <Compare_with_saved_password+0xe6>
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9e 83       	std	Y+6, r25	; 0x06
    12e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <Compare_with_saved_password+0xda>
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <Compare_with_saved_password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ee:	6f 81       	ldd	r22, Y+7	; 0x07
    12f0:	78 85       	ldd	r23, Y+8	; 0x08
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <Compare_with_saved_password+0x122>
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
 */
uint8 Compare_with_saved_password(uint8*Password_array1,uint8*Password_array2)
{
	uint8 i;

	for(i=0;i<PASSWORD_SIZE;i++)
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	8f 87       	std	Y+15, r24	; 0x0f
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	85 30       	cpi	r24, 0x05	; 5
    1320:	08 f4       	brcc	.+2      	; 0x1324 <Compare_with_saved_password+0x138>
    1322:	74 cf       	rjmp	.-280    	; 0x120c <Compare_with_saved_password+0x20>
	{
		EEPROM_readByte(0x0000+i,Password_array2[i]);
		_delay_ms(10);
	}

	for(i=0;i<PASSWORD_SIZE;i++)
    1324:	1f 86       	std	Y+15, r1	; 0x0f
    1326:	19 c0       	rjmp	.+50     	; 0x135a <Compare_with_saved_password+0x16e>
	{
		if(Password_array1[i]!=Password_array2[i])
    1328:	8f 85       	ldd	r24, Y+15	; 0x0f
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	88 89       	ldd	r24, Y+16	; 0x10
    1330:	99 89       	ldd	r25, Y+17	; 0x11
    1332:	fc 01       	movw	r30, r24
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	40 81       	ld	r20, Z
    133a:	8f 85       	ldd	r24, Y+15	; 0x0f
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8a 89       	ldd	r24, Y+18	; 0x12
    1342:	9b 89       	ldd	r25, Y+19	; 0x13
    1344:	fc 01       	movw	r30, r24
    1346:	e2 0f       	add	r30, r18
    1348:	f3 1f       	adc	r31, r19
    134a:	80 81       	ld	r24, Z
    134c:	48 17       	cp	r20, r24
    134e:	11 f0       	breq	.+4      	; 0x1354 <Compare_with_saved_password+0x168>
		{
			return UN_MATCHED;
    1350:	1c 8a       	std	Y+20, r1	; 0x14
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <Compare_with_saved_password+0x178>
	{
		EEPROM_readByte(0x0000+i,Password_array2[i]);
		_delay_ms(10);
	}

	for(i=0;i<PASSWORD_SIZE;i++)
    1354:	8f 85       	ldd	r24, Y+15	; 0x0f
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	8f 87       	std	Y+15, r24	; 0x0f
    135a:	8f 85       	ldd	r24, Y+15	; 0x0f
    135c:	85 30       	cpi	r24, 0x05	; 5
    135e:	20 f3       	brcs	.-56     	; 0x1328 <Compare_with_saved_password+0x13c>
		{
			return UN_MATCHED;
		}

	}
	return MATCHED;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	8c 8b       	std	Y+20, r24	; 0x14
    1364:	8c 89       	ldd	r24, Y+20	; 0x14



}
    1366:	64 96       	adiw	r28, 0x14	; 20
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <save_Password>:
 * Description :
 * Functional responsible for :
 * Saving the password passed to it in the EEPROM
 */
void save_Password(uint8 *Password_array)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	61 97       	sbiw	r28, 0x11	; 17
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	99 8b       	std	Y+17, r25	; 0x11
    138e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++)
    1390:	1f 86       	std	Y+15, r1	; 0x0f
    1392:	85 c0       	rjmp	.+266    	; 0x149e <save_Password+0x126>
	{
		EEPROM_writeByte((0x0000+i),Password_array[i]);
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	48 2f       	mov	r20, r24
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	8f 85       	ldd	r24, Y+15	; 0x0f
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	88 89       	ldd	r24, Y+16	; 0x10
    13a2:	99 89       	ldd	r25, Y+17	; 0x11
    13a4:	fc 01       	movw	r30, r24
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	20 81       	ld	r18, Z
    13ac:	ca 01       	movw	r24, r20
    13ae:	62 2f       	mov	r22, r18
    13b0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <EEPROM_writeByte>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e2       	ldi	r26, 0x20	; 32
    13ba:	b1 e4       	ldi	r27, 0x41	; 65
    13bc:	8b 87       	std	Y+11, r24	; 0x0b
    13be:	9c 87       	std	Y+12, r25	; 0x0c
    13c0:	ad 87       	std	Y+13, r26	; 0x0d
    13c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4a ef       	ldi	r20, 0xFA	; 250
    13d2:	54 e4       	ldi	r21, 0x44	; 68
    13d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	8f 83       	std	Y+7, r24	; 0x07
    13de:	98 87       	std	Y+8, r25	; 0x08
    13e0:	a9 87       	std	Y+9, r26	; 0x09
    13e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	2c f4       	brge	.+10     	; 0x1406 <save_Password+0x8e>
		__ticks = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <save_Password+0x10c>
	else if (__tmp > 65535)
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	4c f5       	brge	.+82     	; 0x1470 <save_Password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1420:	7c 85       	ldd	r23, Y+12	; 0x0c
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e2       	ldi	r20, 0x20	; 32
    142c:	51 e4       	ldi	r21, 0x41	; 65
    142e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <save_Password+0xee>
    1448:	88 ec       	ldi	r24, 0xC8	; 200
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <save_Password+0xdc>
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f7       	brne	.-38     	; 0x1448 <save_Password+0xd0>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <save_Password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1470:	6f 81       	ldd	r22, Y+7	; 0x07
    1472:	78 85       	ldd	r23, Y+8	; 0x08
    1474:	89 85       	ldd	r24, Y+9	; 0x09
    1476:	9a 85       	ldd	r25, Y+10	; 0x0a
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <save_Password+0x118>
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
 * Saving the password passed to it in the EEPROM
 */
void save_Password(uint8 *Password_array)
{
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++)
    1498:	8f 85       	ldd	r24, Y+15	; 0x0f
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	8f 87       	std	Y+15, r24	; 0x0f
    149e:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a0:	85 30       	cpi	r24, 0x05	; 5
    14a2:	08 f4       	brcc	.+2      	; 0x14a6 <save_Password+0x12e>
    14a4:	77 cf       	rjmp	.-274    	; 0x1394 <save_Password+0x1c>
	{
		EEPROM_writeByte((0x0000+i),Password_array[i]);
		_delay_ms(10);
	}
}
    14a6:	61 96       	adiw	r28, 0x11	; 17
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <recieveByte>:
 * Functional responsible for :
 * Syncing the UART in the Control_ECU and the UART in HMI_ECU
 * Receiving data from the UART in the HMI_ECU
 */
uint8 recieveByte(void)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	0f 92       	push	r0
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	uint8 byte;
	while(UART_recieveByte() != READY){}
    14c2:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    14c6:	8f 3f       	cpi	r24, 0xFF	; 255
    14c8:	e1 f7       	brne	.-8      	; 0x14c2 <recieveByte+0xa>
	UART_sendByte(READY);
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
	byte=UART_recieveByte();
    14d0:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    14d4:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(DONE);
    14d6:	8e ef       	ldi	r24, 0xFE	; 254
    14d8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
	return byte;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <sendByte>:
 * Functional responsible for :
 * Syncing the UART in the Control_ECU and the UART in HMI_ECU
 * Sending data to the UART in the HMI_ECU
 */
void sendByte(uint8 byte)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
	while(UART_recieveByte() != READY){}
    14f8:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    14fc:	8f 3f       	cpi	r24, 0xFF	; 255
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <sendByte+0x12>
	UART_sendByte(byte);
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
	while(UART_recieveByte() != DONE){}
    1506:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    150a:	8e 3f       	cpi	r24, 0xFE	; 254
    150c:	e1 f7       	brne	.-8      	; 0x1506 <sendByte+0x20>
}
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <motorTime>:
/*
 * Description :
 * Function called when by the ISR when the overflow interrupt take place
 */
void motorTime(void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
	g_tick_motor++;
    151e:	80 91 8f 00 	lds	r24, 0x008F
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 8f 00 	sts	0x008F, r24
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <buzzerTime>:
/*
 * Description :
 * Function called when by the ISR when the overflow interrupt take place
 */
void buzzerTime(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	g_tick_buzzer++;
    1536:	80 91 90 00 	lds	r24, 0x0090
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	80 93 90 00 	sts	0x0090, r24
}
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <timer1_SetRequiredCallBack>:
 * Description :
 * Functional responsible for :
 * Setting the required call back function
 */
void timer1_SetRequiredCallBack(uint8 device)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <timer1_SetRequiredCallBack+0x6>
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
	switch(device)
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3b 83       	std	Y+3, r19	; 0x03
    155c:	2a 83       	std	Y+2, r18	; 0x02
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	31 f0       	breq	.+12     	; 0x1572 <timer1_SetRequiredCallBack+0x2c>
    1566:	2a 81       	ldd	r18, Y+2	; 0x02
    1568:	3b 81       	ldd	r19, Y+3	; 0x03
    156a:	21 30       	cpi	r18, 0x01	; 1
    156c:	31 05       	cpc	r19, r1
    156e:	31 f0       	breq	.+12     	; 0x157c <timer1_SetRequiredCallBack+0x36>
    1570:	09 c0       	rjmp	.+18     	; 0x1584 <timer1_SetRequiredCallBack+0x3e>
	{
	case MOTOR : Timer1_setCallBack(&motorTime);
    1572:	8b e8       	ldi	r24, 0x8B	; 139
    1574:	9a e0       	ldi	r25, 0x0A	; 10
    1576:	0e 94 8a 06 	call	0xd14	; 0xd14 <Timer1_setCallBack>
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <timer1_SetRequiredCallBack+0x3e>
	break;
	case BUZZER : Timer1_setCallBack(&buzzerTime);
    157c:	87 e9       	ldi	r24, 0x97	; 151
    157e:	9a e0       	ldi	r25, 0x0A	; 10
    1580:	0e 94 8a 06 	call	0xd14	; 0xd14 <Timer1_setCallBack>
	}
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <EEPROM_init>:
#include "external_eeprom.h"
#include "twi.h"


void EEPROM_init(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	28 97       	sbiw	r28, 0x08	; 8
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
	i2c_ConfigType TWI_Config = {0x01,0x02,TWI_Prescaler_1};
    15a4:	ce 01       	movw	r24, r28
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	9d 83       	std	Y+5, r25	; 0x05
    15aa:	8c 83       	std	Y+4, r24	; 0x04
    15ac:	e5 e7       	ldi	r30, 0x75	; 117
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	ff 83       	std	Y+7, r31	; 0x07
    15b2:	ee 83       	std	Y+6, r30	; 0x06
    15b4:	f3 e0       	ldi	r31, 0x03	; 3
    15b6:	f8 87       	std	Y+8, r31	; 0x08
    15b8:	ee 81       	ldd	r30, Y+6	; 0x06
    15ba:	ff 81       	ldd	r31, Y+7	; 0x07
    15bc:	00 80       	ld	r0, Z
    15be:	8e 81       	ldd	r24, Y+6	; 0x06
    15c0:	9f 81       	ldd	r25, Y+7	; 0x07
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	9f 83       	std	Y+7, r25	; 0x07
    15c6:	8e 83       	std	Y+6, r24	; 0x06
    15c8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ca:	fd 81       	ldd	r31, Y+5	; 0x05
    15cc:	00 82       	st	Z, r0
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	9d 83       	std	Y+5, r25	; 0x05
    15d6:	8c 83       	std	Y+4, r24	; 0x04
    15d8:	98 85       	ldd	r25, Y+8	; 0x08
    15da:	91 50       	subi	r25, 0x01	; 1
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	e8 85       	ldd	r30, Y+8	; 0x08
    15e0:	ee 23       	and	r30, r30
    15e2:	51 f7       	brne	.-44     	; 0x15b8 <EEPROM_init+0x28>
	TWI_init(&TWI_Config);
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <TWI_init>
}
    15ec:	28 96       	adiw	r28, 0x08	; 8
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <EEPROM_writeByte+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <EEPROM_writeByte+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1610:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1614:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    1618:	88 30       	cpi	r24, 0x08	; 8
    161a:	11 f0       	breq	.+4      	; 0x1620 <EEPROM_writeByte+0x22>
		return ERROR;
    161c:	1c 82       	std	Y+4, r1	; 0x04
    161e:	28 c0       	rjmp	.+80     	; 0x1670 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	80 70       	andi	r24, 0x00	; 0
    1626:	97 70       	andi	r25, 0x07	; 7
    1628:	88 0f       	add	r24, r24
    162a:	89 2f       	mov	r24, r25
    162c:	88 1f       	adc	r24, r24
    162e:	99 0b       	sbc	r25, r25
    1630:	91 95       	neg	r25
    1632:	80 6a       	ori	r24, 0xA0	; 160
    1634:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1638:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    163c:	88 31       	cpi	r24, 0x18	; 24
    163e:	11 f0       	breq	.+4      	; 0x1644 <EEPROM_writeByte+0x46>
		return ERROR;
    1640:	1c 82       	std	Y+4, r1	; 0x04
    1642:	16 c0       	rjmp	.+44     	; 0x1670 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    164a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    164e:	88 32       	cpi	r24, 0x28	; 40
    1650:	11 f0       	breq	.+4      	; 0x1656 <EEPROM_writeByte+0x58>
		return ERROR;
    1652:	1c 82       	std	Y+4, r1	; 0x04
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    165c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    1660:	88 32       	cpi	r24, 0x28	; 40
    1662:	11 f0       	breq	.+4      	; 0x1668 <EEPROM_writeByte+0x6a>
		return ERROR;
    1664:	1c 82       	std	Y+4, r1	; 0x04
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    1668:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_stop>

	return SUCCESS;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	8c 83       	std	Y+4, r24	; 0x04
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <EEPROM_readByte+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <EEPROM_readByte+0x8>
    1688:	0f 92       	push	r0
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	7c 83       	std	Y+4, r23	; 0x04
    1694:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1696:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    169a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <EEPROM_readByte+0x26>
		return ERROR;
    16a2:	1d 82       	std	Y+5, r1	; 0x05
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	80 70       	andi	r24, 0x00	; 0
    16ac:	97 70       	andi	r25, 0x07	; 7
    16ae:	88 0f       	add	r24, r24
    16b0:	89 2f       	mov	r24, r25
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 0b       	sbc	r25, r25
    16b6:	91 95       	neg	r25
    16b8:	80 6a       	ori	r24, 0xA0	; 160
    16ba:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16be:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    16c2:	88 31       	cpi	r24, 0x18	; 24
    16c4:	11 f0       	breq	.+4      	; 0x16ca <EEPROM_readByte+0x4a>
		return ERROR;
    16c6:	1d 82       	std	Y+5, r1	; 0x05
    16c8:	32 c0       	rjmp	.+100    	; 0x172e <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16d0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    16d4:	88 32       	cpi	r24, 0x28	; 40
    16d6:	11 f0       	breq	.+4      	; 0x16dc <EEPROM_readByte+0x5c>
		return ERROR;
    16d8:	1d 82       	std	Y+5, r1	; 0x05
    16da:	29 c0       	rjmp	.+82     	; 0x172e <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
    16dc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    16e0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    16e4:	80 31       	cpi	r24, 0x10	; 16
    16e6:	11 f0       	breq	.+4      	; 0x16ec <EEPROM_readByte+0x6c>
		return ERROR;
    16e8:	1d 82       	std	Y+5, r1	; 0x05
    16ea:	21 c0       	rjmp	.+66     	; 0x172e <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	80 70       	andi	r24, 0x00	; 0
    16f2:	97 70       	andi	r25, 0x07	; 7
    16f4:	88 0f       	add	r24, r24
    16f6:	89 2f       	mov	r24, r25
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 0b       	sbc	r25, r25
    16fc:	91 95       	neg	r25
    16fe:	81 6a       	ori	r24, 0xA1	; 161
    1700:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1704:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    1708:	80 34       	cpi	r24, 0x40	; 64
    170a:	11 f0       	breq	.+4      	; 0x1710 <EEPROM_readByte+0x90>
		return ERROR;
    170c:	1d 82       	std	Y+5, r1	; 0x05
    170e:	0f c0       	rjmp	.+30     	; 0x172e <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    1710:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <TWI_readByteWithNACK>
    1714:	eb 81       	ldd	r30, Y+3	; 0x03
    1716:	fc 81       	ldd	r31, Y+4	; 0x04
    1718:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    171a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TWI_getStatus>
    171e:	88 35       	cpi	r24, 0x58	; 88
    1720:	11 f0       	breq	.+4      	; 0x1726 <EEPROM_readByte+0xa6>
		return ERROR;
    1722:	1d 82       	std	Y+5, r1	; 0x05
    1724:	04 c0       	rjmp	.+8      	; 0x172e <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    1726:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_stop>

	return SUCCESS;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <GPIO_setupPinDirection+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <GPIO_setupPinDirection+0x8>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	6a 83       	std	Y+2, r22	; 0x02
    1752:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	88 30       	cpi	r24, 0x08	; 8
    1758:	08 f0       	brcs	.+2      	; 0x175c <GPIO_setupPinDirection+0x1c>
    175a:	d5 c0       	rjmp	.+426    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	08 f0       	brcs	.+2      	; 0x1764 <GPIO_setupPinDirection+0x24>
    1762:	d1 c0       	rjmp	.+418    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3d 83       	std	Y+5, r19	; 0x05
    176c:	2c 83       	std	Y+4, r18	; 0x04
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <GPIO_setupPinDirection+0x3a>
    1778:	43 c0       	rjmp	.+134    	; 0x1800 <GPIO_setupPinDirection+0xc0>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <GPIO_setupPinDirection+0x4e>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	71 f0       	breq	.+28     	; 0x17a8 <GPIO_setupPinDirection+0x68>
    178c:	bc c0       	rjmp	.+376    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <GPIO_setupPinDirection+0x5a>
    1798:	5f c0       	rjmp	.+190    	; 0x1858 <GPIO_setupPinDirection+0x118>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <GPIO_setupPinDirection+0x66>
    17a4:	85 c0       	rjmp	.+266    	; 0x18b0 <GPIO_setupPinDirection+0x170>
    17a6:	af c0       	rjmp	.+350    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17ae:	aa e3       	ldi	r26, 0x3A	; 58
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ea e3       	ldi	r30, 0x3A	; 58
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_setupPinDirection+0x8c>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_setupPinDirection+0x88>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	98 c0       	rjmp	.+304    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17d6:	aa e3       	ldi	r26, 0x3A	; 58
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ea e3       	ldi	r30, 0x3A	; 58
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_setupPinDirection+0xb4>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_setupPinDirection+0xb0>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	83 c0       	rjmp	.+262    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	a1 f4       	brne	.+40     	; 0x182e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1806:	a7 e3       	ldi	r26, 0x37	; 55
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e7 e3       	ldi	r30, 0x37	; 55
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <GPIO_setupPinDirection+0xe4>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <GPIO_setupPinDirection+0xe0>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	6c c0       	rjmp	.+216    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    182e:	a7 e3       	ldi	r26, 0x37	; 55
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e7 e3       	ldi	r30, 0x37	; 55
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_setupPinDirection+0x10c>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_setupPinDirection+0x108>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	57 c0       	rjmp	.+174    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	a1 f4       	brne	.+40     	; 0x1886 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    185e:	a4 e3       	ldi	r26, 0x34	; 52
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e4 e3       	ldi	r30, 0x34	; 52
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_setupPinDirection+0x13c>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_setupPinDirection+0x138>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	40 c0       	rjmp	.+128    	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1886:	a4 e3       	ldi	r26, 0x34	; 52
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e4 e3       	ldi	r30, 0x34	; 52
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <GPIO_setupPinDirection+0x164>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <GPIO_setupPinDirection+0x160>
    18a8:	80 95       	com	r24
    18aa:	84 23       	and	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	2b c0       	rjmp	.+86     	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	a1 f4       	brne	.+40     	; 0x18de <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18b6:	a1 e3       	ldi	r26, 0x31	; 49
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e1 e3       	ldi	r30, 0x31	; 49
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <GPIO_setupPinDirection+0x194>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <GPIO_setupPinDirection+0x190>
    18d8:	84 2b       	or	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    18de:	a1 e3       	ldi	r26, 0x31	; 49
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e1 e3       	ldi	r30, 0x31	; 49
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <GPIO_setupPinDirection+0x1bc>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <GPIO_setupPinDirection+0x1b8>
    1900:	80 95       	com	r24
    1902:	84 23       	and	r24, r20
    1904:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <GPIO_writePin+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <GPIO_writePin+0x8>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6a 83       	std	Y+2, r22	; 0x02
    1928:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	08 f0       	brcs	.+2      	; 0x1932 <GPIO_writePin+0x1c>
    1930:	d5 c0       	rjmp	.+426    	; 0x1adc <GPIO_writePin+0x1c6>
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	88 30       	cpi	r24, 0x08	; 8
    1936:	08 f0       	brcs	.+2      	; 0x193a <GPIO_writePin+0x24>
    1938:	d1 c0       	rjmp	.+418    	; 0x1adc <GPIO_writePin+0x1c6>

	}
	else{
		switch(port_num){
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3d 83       	std	Y+5, r19	; 0x05
    1942:	2c 83       	std	Y+4, r18	; 0x04
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <GPIO_writePin+0x3a>
    194e:	43 c0       	rjmp	.+134    	; 0x19d6 <GPIO_writePin+0xc0>
    1950:	2c 81       	ldd	r18, Y+4	; 0x04
    1952:	3d 81       	ldd	r19, Y+5	; 0x05
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <GPIO_writePin+0x4e>
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	71 f0       	breq	.+28     	; 0x197e <GPIO_writePin+0x68>
    1962:	bc c0       	rjmp	.+376    	; 0x1adc <GPIO_writePin+0x1c6>
    1964:	2c 81       	ldd	r18, Y+4	; 0x04
    1966:	3d 81       	ldd	r19, Y+5	; 0x05
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <GPIO_writePin+0x5a>
    196e:	5f c0       	rjmp	.+190    	; 0x1a2e <GPIO_writePin+0x118>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <GPIO_writePin+0x66>
    197a:	85 c0       	rjmp	.+266    	; 0x1a86 <GPIO_writePin+0x170>
    197c:	af c0       	rjmp	.+350    	; 0x1adc <GPIO_writePin+0x1c6>
		case 0:

			if(value==LOGIC_HIGH){
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	a1 f4       	brne	.+40     	; 0x19ac <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1984:	ab e3       	ldi	r26, 0x3B	; 59
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <GPIO_writePin+0x8c>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <GPIO_writePin+0x88>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	98 c0       	rjmp	.+304    	; 0x1adc <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    19ac:	ab e3       	ldi	r26, 0x3B	; 59
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <GPIO_writePin+0xb4>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <GPIO_writePin+0xb0>
    19ce:	80 95       	com	r24
    19d0:	84 23       	and	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	83 c0       	rjmp	.+262    	; 0x1adc <GPIO_writePin+0x1c6>
			}
			break;

		case 1:
			if(value==LOGIC_HIGH){
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	a1 f4       	brne	.+40     	; 0x1a04 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    19dc:	a8 e3       	ldi	r26, 0x38	; 56
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e8 e3       	ldi	r30, 0x38	; 56
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <GPIO_writePin+0xe4>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <GPIO_writePin+0xe0>
    19fe:	84 2b       	or	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	6c c0       	rjmp	.+216    	; 0x1adc <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1a04:	a8 e3       	ldi	r26, 0x38	; 56
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_writePin+0x10c>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_writePin+0x108>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	57 c0       	rjmp	.+174    	; 0x1adc <GPIO_writePin+0x1c6>
			}
			break;

		case 2:
			if(value==LOGIC_HIGH){
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	a1 f4       	brne	.+40     	; 0x1a5c <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1a34:	a5 e3       	ldi	r26, 0x35	; 53
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e5 e3       	ldi	r30, 0x35	; 53
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	48 2f       	mov	r20, r24
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 2e       	mov	r0, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <GPIO_writePin+0x13c>
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	0a 94       	dec	r0
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <GPIO_writePin+0x138>
    1a56:	84 2b       	or	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	40 c0       	rjmp	.+128    	; 0x1adc <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <GPIO_writePin+0x164>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <GPIO_writePin+0x160>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	2b c0       	rjmp	.+86     	; 0x1adc <GPIO_writePin+0x1c6>
			}
			break;

		case 3:
			if(value==LOGIC_HIGH){
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	a1 f4       	brne	.+40     	; 0x1ab4 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1a8c:	a2 e3       	ldi	r26, 0x32	; 50
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <GPIO_writePin+0x194>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <GPIO_writePin+0x190>
    1aae:	84 2b       	or	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1ab4:	a2 e3       	ldi	r26, 0x32	; 50
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e2 e3       	ldi	r30, 0x32	; 50
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <GPIO_writePin+0x1bc>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <GPIO_writePin+0x1b8>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <GPIO_readPin+0x6>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <GPIO_readPin+0x8>
    1af4:	0f 92       	push	r0
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	8a 83       	std	Y+2, r24	; 0x02
    1afc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    1afe:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <GPIO_readPin+0x1c>
    1b06:	84 c0       	rjmp	.+264    	; 0x1c10 <GPIO_readPin+0x124>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	88 30       	cpi	r24, 0x08	; 8
    1b0c:	08 f0       	brcs	.+2      	; 0x1b10 <GPIO_readPin+0x24>
    1b0e:	80 c0       	rjmp	.+256    	; 0x1c10 <GPIO_readPin+0x124>

	}
	else{
		switch(port_num){
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3d 83       	std	Y+5, r19	; 0x05
    1b18:	2c 83       	std	Y+4, r18	; 0x04
    1b1a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b1c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b1e:	41 30       	cpi	r20, 0x01	; 1
    1b20:	51 05       	cpc	r21, r1
    1b22:	79 f1       	breq	.+94     	; 0x1b82 <GPIO_readPin+0x96>
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	82 30       	cpi	r24, 0x02	; 2
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	34 f4       	brge	.+12     	; 0x1b3a <GPIO_readPin+0x4e>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	21 15       	cp	r18, r1
    1b34:	31 05       	cpc	r19, r1
    1b36:	69 f0       	breq	.+26     	; 0x1b52 <GPIO_readPin+0x66>
    1b38:	6b c0       	rjmp	.+214    	; 0x1c10 <GPIO_readPin+0x124>
    1b3a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b3c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b3e:	42 30       	cpi	r20, 0x02	; 2
    1b40:	51 05       	cpc	r21, r1
    1b42:	b9 f1       	breq	.+110    	; 0x1bb2 <GPIO_readPin+0xc6>
    1b44:	8c 81       	ldd	r24, Y+4	; 0x04
    1b46:	9d 81       	ldd	r25, Y+5	; 0x05
    1b48:	83 30       	cpi	r24, 0x03	; 3
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <GPIO_readPin+0x64>
    1b4e:	49 c0       	rjmp	.+146    	; 0x1be2 <GPIO_readPin+0xf6>
    1b50:	5f c0       	rjmp	.+190    	; 0x1c10 <GPIO_readPin+0x124>
		case 0:
			if(BIT_IS_SET(PINA,pin_num)){
    1b52:	e9 e3       	ldi	r30, 0x39	; 57
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 2f       	mov	r24, r24
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a9 01       	movw	r20, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <GPIO_readPin+0x7e>
    1b66:	55 95       	asr	r21
    1b68:	47 95       	ror	r20
    1b6a:	8a 95       	dec	r24
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <GPIO_readPin+0x7a>
    1b6e:	ca 01       	movw	r24, r20
    1b70:	81 70       	andi	r24, 0x01	; 1
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	88 23       	and	r24, r24
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <GPIO_readPin+0x92>
				temp = LOGIC_HIGH;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	49 c0       	rjmp	.+146    	; 0x1c10 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
    1b80:	47 c0       	rjmp	.+142    	; 0x1c10 <GPIO_readPin+0x124>
			}
			break;

		case 1:
			if(BIT_IS_SET(PINB,pin_num)){
    1b82:	e6 e3       	ldi	r30, 0x36	; 54
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a9 01       	movw	r20, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <GPIO_readPin+0xae>
    1b96:	55 95       	asr	r21
    1b98:	47 95       	ror	r20
    1b9a:	8a 95       	dec	r24
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <GPIO_readPin+0xaa>
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	88 23       	and	r24, r24
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <GPIO_readPin+0xc2>
				temp = LOGIC_HIGH;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	31 c0       	rjmp	.+98     	; 0x1c10 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    1bae:	19 82       	std	Y+1, r1	; 0x01
    1bb0:	2f c0       	rjmp	.+94     	; 0x1c10 <GPIO_readPin+0x124>
			}

			break;

		case 2:
			if(BIT_IS_SET(PINC,pin_num)){
    1bb2:	e3 e3       	ldi	r30, 0x33	; 51
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a9 01       	movw	r20, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <GPIO_readPin+0xde>
    1bc6:	55 95       	asr	r21
    1bc8:	47 95       	ror	r20
    1bca:	8a 95       	dec	r24
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <GPIO_readPin+0xda>
    1bce:	ca 01       	movw	r24, r20
    1bd0:	81 70       	andi	r24, 0x01	; 1
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f0       	breq	.+6      	; 0x1bde <GPIO_readPin+0xf2>
				temp = LOGIC_HIGH;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	19 c0       	rjmp	.+50     	; 0x1c10 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	17 c0       	rjmp	.+46     	; 0x1c10 <GPIO_readPin+0x124>
			}
			break;

		case 3:
			if(BIT_IS_SET(PIND,pin_num)){
    1be2:	e0 e3       	ldi	r30, 0x30	; 48
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <GPIO_readPin+0x10e>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <GPIO_readPin+0x10a>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	90 70       	andi	r25, 0x00	; 0
    1c04:	88 23       	and	r24, r24
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <GPIO_readPin+0x122>
				temp = LOGIC_HIGH;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    1c0e:	19 82       	std	Y+1, r1	; 0x01
			}

			break;
		}
	}
	return temp;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <GPIO_setupPortDirection+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <GPIO_setupPortDirection+0x8>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	84 30       	cpi	r24, 0x04	; 4
    1c36:	90 f5       	brcc	.+100    	; 0x1c9c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	3c 83       	std	Y+4, r19	; 0x04
    1c40:	2b 83       	std	Y+3, r18	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	d1 f0       	breq	.+52     	; 0x1c80 <GPIO_setupPortDirection+0x5e>
    1c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <GPIO_setupPortDirection+0x3e>
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	61 f0       	breq	.+24     	; 0x1c76 <GPIO_setupPortDirection+0x54>
    1c5e:	1e c0       	rjmp	.+60     	; 0x1c9c <GPIO_setupPortDirection+0x7a>
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	3c 81       	ldd	r19, Y+4	; 0x04
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	81 f0       	breq	.+32     	; 0x1c8a <GPIO_setupPortDirection+0x68>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	91 05       	cpc	r25, r1
    1c72:	81 f0       	breq	.+32     	; 0x1c94 <GPIO_setupPortDirection+0x72>
    1c74:	13 c0       	rjmp	.+38     	; 0x1c9c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c76:	ea e3       	ldi	r30, 0x3A	; 58
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	80 83       	st	Z, r24
    1c7e:	0e c0       	rjmp	.+28     	; 0x1c9c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c80:	e7 e3       	ldi	r30, 0x37	; 55
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	80 83       	st	Z, r24
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c8a:	e4 e3       	ldi	r30, 0x34	; 52
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	80 83       	st	Z, r24
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c94:	e1 e3       	ldi	r30, 0x31	; 49
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <GPIO_writePort+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <GPIO_writePort+0x8>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	84 30       	cpi	r24, 0x04	; 4
    1cbe:	90 f5       	brcc	.+100    	; 0x1d24 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3c 83       	std	Y+4, r19	; 0x04
    1cc8:	2b 83       	std	Y+3, r18	; 0x03
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	d1 f0       	breq	.+52     	; 0x1d08 <GPIO_writePort+0x5e>
    1cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd8:	22 30       	cpi	r18, 0x02	; 2
    1cda:	31 05       	cpc	r19, r1
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <GPIO_writePort+0x3e>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	61 f0       	breq	.+24     	; 0x1cfe <GPIO_writePort+0x54>
    1ce6:	1e c0       	rjmp	.+60     	; 0x1d24 <GPIO_writePort+0x7a>
    1ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cea:	3c 81       	ldd	r19, Y+4	; 0x04
    1cec:	22 30       	cpi	r18, 0x02	; 2
    1cee:	31 05       	cpc	r19, r1
    1cf0:	81 f0       	breq	.+32     	; 0x1d12 <GPIO_writePort+0x68>
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	81 f0       	breq	.+32     	; 0x1d1c <GPIO_writePort+0x72>
    1cfc:	13 c0       	rjmp	.+38     	; 0x1d24 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1cfe:	eb e3       	ldi	r30, 0x3B	; 59
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	80 83       	st	Z, r24
    1d06:	0e c0       	rjmp	.+28     	; 0x1d24 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d08:	e8 e3       	ldi	r30, 0x38	; 56
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	80 83       	st	Z, r24
    1d10:	09 c0       	rjmp	.+18     	; 0x1d24 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d12:	e5 e3       	ldi	r30, 0x35	; 53
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	80 83       	st	Z, r24
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	80 83       	st	Z, r24
			break;
		}

	}
}
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <GPIO_readPort>:
	 * Description :
	 * Read and return the value of the required port.
	 * If the input port number is not correct, The function will return ZERO value.
	 */
	uint8 GPIO_readPort(uint8 port_num)
	{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <GPIO_readPort+0x6>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <GPIO_readPort+0x8>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
		uint8 temp=0;
    1d40:	19 82       	std	Y+1, r1	; 0x01

		if(port_num >= NUM_OF_PORTS)
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	90 f5       	brcc	.+100    	; 0x1dac <GPIO_readPort+0x7a>
			/* Do Nothing */
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3c 83       	std	Y+4, r19	; 0x04
    1d50:	2b 83       	std	Y+3, r18	; 0x03
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	d1 f0       	breq	.+52     	; 0x1d90 <GPIO_readPort+0x5e>
    1d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <GPIO_readPort+0x3e>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <GPIO_readPort+0x54>
    1d6e:	1e c0       	rjmp	.+60     	; 0x1dac <GPIO_readPort+0x7a>
    1d70:	2b 81       	ldd	r18, Y+3	; 0x03
    1d72:	3c 81       	ldd	r19, Y+4	; 0x04
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	81 f0       	breq	.+32     	; 0x1d9a <GPIO_readPort+0x68>
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	91 05       	cpc	r25, r1
    1d82:	81 f0       	breq	.+32     	; 0x1da4 <GPIO_readPort+0x72>
    1d84:	13 c0       	rjmp	.+38     	; 0x1dac <GPIO_readPort+0x7a>
			{
			case 0:
				temp=PINA;
    1d86:	e9 e3       	ldi	r30, 0x39	; 57
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	0e c0       	rjmp	.+28     	; 0x1dac <GPIO_readPort+0x7a>

				break;
			case PORTB_ID:
				temp=PINB;
    1d90:	e6 e3       	ldi	r30, 0x36	; 54
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	09 c0       	rjmp	.+18     	; 0x1dac <GPIO_readPort+0x7a>
				break;
			case PORTC_ID:
				temp=PINC;
    1d9a:	e3 e3       	ldi	r30, 0x33	; 51
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <GPIO_readPort+0x7a>
				break;
			case PORTD_ID:
				temp=PIND;
    1da4:	e0 e3       	ldi	r30, 0x30	; 48
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		return temp;
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <DcMotor_Init>:
#include "timer0_pwm.h" /* Can be operated using PWM or SPI that's why I included this in .c file*/
/*
 * Description :
 * Functional responsible for assigning motor I/O pins
 */
void DcMotor_Init(void){
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection( MOTOR_FIRST_PORT_ID , MOTOR_FIRST_PIN_ID, PIN_OUTPUT);
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	66 e0       	ldi	r22, 0x06	; 6
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( MOTOR_SECOND_PORT_ID , MOTOR_SECOND_PIN_ID, PIN_OUTPUT);
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	67 e0       	ldi	r22, 0x07	; 7
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_FIRST_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	66 e0       	ldi	r22, 0x06	; 6
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
	GPIO_writePin(MOTOR_SECOND_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	67 e0       	ldi	r22, 0x07	; 7
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <DcMotor_Rotate>:
/*
 * Description :
 * Functional responsible for rotating the motor in the required direction and with the required speed
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <DcMotor_Rotate+0x6>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	6a 83       	std	Y+2, r22	; 0x02
	if(state==STOP)
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	88 23       	and	r24, r24
    1e04:	59 f4       	brne	.+22     	; 0x1e1c <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(MOTOR_FIRST_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	66 e0       	ldi	r22, 0x06	; 6
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
		GPIO_writePin(MOTOR_SECOND_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	67 e0       	ldi	r22, 0x07	; 7
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
    1e1a:	1b c0       	rjmp	.+54     	; 0x1e52 <DcMotor_Rotate+0x60>
	}
	else if(state==A_CW){
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	59 f4       	brne	.+22     	; 0x1e38 <DcMotor_Rotate+0x46>
		GPIO_writePin(MOTOR_FIRST_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	66 e0       	ldi	r22, 0x06	; 6
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
		GPIO_writePin(MOTOR_SECOND_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_HIGH);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	67 e0       	ldi	r22, 0x07	; 7
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
    1e36:	0d c0       	rjmp	.+26     	; 0x1e52 <DcMotor_Rotate+0x60>
	}
	else if(state==CW){
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	51 f4       	brne	.+20     	; 0x1e52 <DcMotor_Rotate+0x60>
		GPIO_writePin(MOTOR_FIRST_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_HIGH);
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	66 e0       	ldi	r22, 0x06	; 6
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>
		GPIO_writePin(MOTOR_SECOND_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	67 e0       	ldi	r22, 0x07	; 7
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_writePin>

	}
	PWM_Timer0_Init(speed);
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <PWM_Timer0_Init>
}
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <PWM_Timer0_Init>:
/*
 * Description :
 * Functional responsible for initializing Timer0 in PWM mode
 */
void PWM_Timer0_Init(uint8 duty_cycle_percent)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;
    1e6e:	e2 e5       	ldi	r30, 0x52	; 82
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	10 82       	st	Z, r1
	OCR0  = ((255*duty_cycle_percent)/100); // Set Compare Value
    1e74:	ec e5       	ldi	r30, 0x5C	; 92
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	ca 01       	movw	r24, r20
    1e80:	9c 01       	movw	r18, r24
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	c9 01       	movw	r24, r18
    1e88:	96 95       	lsr	r25
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	88 27       	eor	r24, r24
    1e8e:	97 95       	ror	r25
    1e90:	87 95       	ror	r24
    1e92:	82 1b       	sub	r24, r18
    1e94:	93 0b       	sbc	r25, r19
    1e96:	84 0f       	add	r24, r20
    1e98:	95 1f       	adc	r25, r21
    1e9a:	24 e6       	ldi	r18, 0x64	; 100
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	b9 01       	movw	r22, r18
    1ea0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__divmodhi4>
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);//set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1eb2:	e3 e5       	ldi	r30, 0x53	; 83
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	8a e6       	ldi	r24, 0x6A	; 106
    1eb8:	80 83       	st	Z, r24

}
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const i2c_ConfigType *i2c_config)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <TWI_init+0x6>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Choose required bit rate & prescaler
	 * SCL frequency = (CPU clock frequency / ((16+2(TWBR))) * 4^TWPS)
	 */
	TWBR = i2c_config->i2c_bit_rate;
    1ed0:	a0 e2       	ldi	r26, 0x20	; 32
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	81 81       	ldd	r24, Z+1	; 0x01
    1eda:	8c 93       	st	X, r24
	TWSR = (TWSR & 0xFC) |((i2c_config->i2c_prescaler)&0x03);
    1edc:	a1 e2       	ldi	r26, 0x21	; 33
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e1 e2       	ldi	r30, 0x21	; 33
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	9c 7f       	andi	r25, 0xFC	; 252
    1eea:	e9 81       	ldd	r30, Y+1	; 0x01
    1eec:	fa 81       	ldd	r31, Y+2	; 0x02
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	83 70       	andi	r24, 0x03	; 3
    1ef2:	89 2b       	or	r24, r25
    1ef4:	8c 93       	st	X, r24
	/* Two Wire Bus address my address if any master device want to call me:master_slave_address  (used in case this MC is a slave device)
	   General Call Recognition: Off */
	TWAR = i2c_config->master_slave_address; /* my address = master_slave_address :) */
    1ef6:	a2 e2       	ldi	r26, 0x22	; 34
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	80 81       	ld	r24, Z
    1f00:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /* enable TWI */
    1f02:	e6 e5       	ldi	r30, 0x56	; 86
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	84 e0       	ldi	r24, 0x04	; 4
    1f08:	80 83       	st	Z, r24
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <TWI_start>:

void TWI_start(void)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f1c:	e6 e5       	ldi	r30, 0x56	; 86
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	84 ea       	ldi	r24, 0xA4	; 164
    1f22:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f24:	e6 e5       	ldi	r30, 0x56	; 86
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 23       	and	r24, r24
    1f2c:	dc f7       	brge	.-10     	; 0x1f24 <TWI_start+0x10>
}
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <TWI_stop>:

void TWI_stop(void)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f3c:	e6 e5       	ldi	r30, 0x56	; 86
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	84 e9       	ldi	r24, 0x94	; 148
    1f42:	80 83       	st	Z, r24

}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f56:	e3 e2       	ldi	r30, 0x23	; 35
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN); 
    1f5e:	e6 e5       	ldi	r30, 0x56	; 86
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	84 e8       	ldi	r24, 0x84	; 132
    1f64:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f66:	e6 e5       	ldi	r30, 0x56	; 86
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <TWI_writeByte+0x1c>
}
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1f80:	e6 e5       	ldi	r30, 0x56	; 86
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	84 ec       	ldi	r24, 0xC4	; 196
    1f86:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f88:	e6 e5       	ldi	r30, 0x56	; 86
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 23       	and	r24, r24
    1f90:	dc f7       	brge	.-10     	; 0x1f88 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1f92:	e3 e2       	ldi	r30, 0x23	; 35
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
}
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fa6:	e6 e5       	ldi	r30, 0x56	; 86
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	84 e8       	ldi	r24, 0x84	; 132
    1fac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fae:	e6 e5       	ldi	r30, 0x56	; 86
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 23       	and	r24, r24
    1fb6:	dc f7       	brge	.-10     	; 0x1fae <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1fb8:	e3 e2       	ldi	r30, 0x23	; 35
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1fce:	e1 e2       	ldi	r30, 0x21	; 33
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 7f       	andi	r24, 0xF8	; 248
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *UART_Config)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <UART_init+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <UART_init+0x8>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    1ff2:	1a 82       	std	Y+2, r1	; 0x02
    1ff4:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1ff6:	eb e2       	ldi	r30, 0x2B	; 43
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	80 83       	st	Z, r24
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    1ffe:	aa e2       	ldi	r26, 0x2A	; 42
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ea e2       	ldi	r30, 0x2A	; 42
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 69       	ori	r24, 0x98	; 152
    200a:	8c 93       	st	X, r24
	UCSRC|=(1<<URSEL);
    200c:	a0 e4       	ldi	r26, 0x40	; 64
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e0 e4       	ldi	r30, 0x40	; 64
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	80 68       	ori	r24, 0x80	; 128
    2018:	8c 93       	st	X, r24


	if(UART_Config->parity==Even)
    201a:	eb 81       	ldd	r30, Y+3	; 0x03
    201c:	fc 81       	ldd	r31, Y+4	; 0x04
    201e:	81 81       	ldd	r24, Z+1	; 0x01
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	41 f4       	brne	.+16     	; 0x2034 <UART_init+0x52>
	{
		UCSRC|=(1<<UPM1);
    2024:	a0 e4       	ldi	r26, 0x40	; 64
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e0 e4       	ldi	r30, 0x40	; 64
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	80 62       	ori	r24, 0x20	; 32
    2030:	8c 93       	st	X, r24
    2032:	0c c0       	rjmp	.+24     	; 0x204c <UART_init+0x6a>
	}
	else if(UART_Config->parity==Odd)
    2034:	eb 81       	ldd	r30, Y+3	; 0x03
    2036:	fc 81       	ldd	r31, Y+4	; 0x04
    2038:	81 81       	ldd	r24, Z+1	; 0x01
    203a:	88 23       	and	r24, r24
    203c:	39 f4       	brne	.+14     	; 0x204c <UART_init+0x6a>
		UCSRC|=(1<<UPM1)|(1<<UPM0);
    203e:	a0 e4       	ldi	r26, 0x40	; 64
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e0 e4       	ldi	r30, 0x40	; 64
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	80 63       	ori	r24, 0x30	; 48
    204a:	8c 93       	st	X, r24

	if(UART_Config->stop_bit==UART_STOP_2BIT_SELECT)
    204c:	eb 81       	ldd	r30, Y+3	; 0x03
    204e:	fc 81       	ldd	r31, Y+4	; 0x04
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	39 f4       	brne	.+14     	; 0x2064 <UART_init+0x82>
	{
		UCSRC|=(1<<USBS);
    2056:	a0 e4       	ldi	r26, 0x40	; 64
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e0 e4       	ldi	r30, 0x40	; 64
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	88 60       	ori	r24, 0x08	; 8
    2062:	8c 93       	st	X, r24
	else
	{

	}

	if(UART_Config->bit_data==CHARACTER_SIZE_5)
    2064:	eb 81       	ldd	r30, Y+3	; 0x03
    2066:	fc 81       	ldd	r31, Y+4	; 0x04
    2068:	80 81       	ld	r24, Z
    206a:	85 30       	cpi	r24, 0x05	; 5
    206c:	b1 f4       	brne	.+44     	; 0x209a <UART_init+0xb8>
	{
		UCSRC&=~(1<<UCSZ0);
    206e:	a0 e4       	ldi	r26, 0x40	; 64
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e0 e4       	ldi	r30, 0x40	; 64
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	8d 7f       	andi	r24, 0xFD	; 253
    207a:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ1);
    207c:	a0 e4       	ldi	r26, 0x40	; 64
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e0 e4       	ldi	r30, 0x40	; 64
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	8b 7f       	andi	r24, 0xFB	; 251
    2088:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    208a:	aa e2       	ldi	r26, 0x2A	; 42
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	ea e2       	ldi	r30, 0x2A	; 42
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8b 7f       	andi	r24, 0xFB	; 251
    2096:	8c 93       	st	X, r24
    2098:	6b c0       	rjmp	.+214    	; 0x2170 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_6)
    209a:	eb 81       	ldd	r30, Y+3	; 0x03
    209c:	fc 81       	ldd	r31, Y+4	; 0x04
    209e:	80 81       	ld	r24, Z
    20a0:	86 30       	cpi	r24, 0x06	; 6
    20a2:	b1 f4       	brne	.+44     	; 0x20d0 <UART_init+0xee>
	{
		UCSRC|=(1<<UCSZ0);
    20a4:	a0 e4       	ldi	r26, 0x40	; 64
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e0 e4       	ldi	r30, 0x40	; 64
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	82 60       	ori	r24, 0x02	; 2
    20b0:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ1);
    20b2:	a0 e4       	ldi	r26, 0x40	; 64
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e0 e4       	ldi	r30, 0x40	; 64
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8b 7f       	andi	r24, 0xFB	; 251
    20be:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    20c0:	aa e2       	ldi	r26, 0x2A	; 42
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	ea e2       	ldi	r30, 0x2A	; 42
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8b 7f       	andi	r24, 0xFB	; 251
    20cc:	8c 93       	st	X, r24
    20ce:	50 c0       	rjmp	.+160    	; 0x2170 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_7)
    20d0:	eb 81       	ldd	r30, Y+3	; 0x03
    20d2:	fc 81       	ldd	r31, Y+4	; 0x04
    20d4:	80 81       	ld	r24, Z
    20d6:	87 30       	cpi	r24, 0x07	; 7
    20d8:	b1 f4       	brne	.+44     	; 0x2106 <UART_init+0x124>
	{
		UCSRC|=(1<<UCSZ1);
    20da:	a0 e4       	ldi	r26, 0x40	; 64
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e0 e4       	ldi	r30, 0x40	; 64
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	84 60       	ori	r24, 0x04	; 4
    20e6:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ0);
    20e8:	a0 e4       	ldi	r26, 0x40	; 64
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e0 e4       	ldi	r30, 0x40	; 64
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8d 7f       	andi	r24, 0xFD	; 253
    20f4:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    20f6:	aa e2       	ldi	r26, 0x2A	; 42
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	ea e2       	ldi	r30, 0x2A	; 42
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	8b 7f       	andi	r24, 0xFB	; 251
    2102:	8c 93       	st	X, r24
    2104:	35 c0       	rjmp	.+106    	; 0x2170 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_8)
    2106:	eb 81       	ldd	r30, Y+3	; 0x03
    2108:	fc 81       	ldd	r31, Y+4	; 0x04
    210a:	80 81       	ld	r24, Z
    210c:	88 30       	cpi	r24, 0x08	; 8
    210e:	b1 f4       	brne	.+44     	; 0x213c <UART_init+0x15a>
	{
		UCSRC|=(1<<UCSZ0);
    2110:	a0 e4       	ldi	r26, 0x40	; 64
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e0 e4       	ldi	r30, 0x40	; 64
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	82 60       	ori	r24, 0x02	; 2
    211c:	8c 93       	st	X, r24
		UCSRC|=(1<<UCSZ1);
    211e:	a0 e4       	ldi	r26, 0x40	; 64
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e0 e4       	ldi	r30, 0x40	; 64
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	84 60       	ori	r24, 0x04	; 4
    212a:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    212c:	aa e2       	ldi	r26, 0x2A	; 42
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ea e2       	ldi	r30, 0x2A	; 42
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8b 7f       	andi	r24, 0xFB	; 251
    2138:	8c 93       	st	X, r24
    213a:	1a c0       	rjmp	.+52     	; 0x2170 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_9)
    213c:	eb 81       	ldd	r30, Y+3	; 0x03
    213e:	fc 81       	ldd	r31, Y+4	; 0x04
    2140:	80 81       	ld	r24, Z
    2142:	89 30       	cpi	r24, 0x09	; 9
    2144:	a9 f4       	brne	.+42     	; 0x2170 <UART_init+0x18e>
	{
		UCSRC|=(1<<UCSZ0);
    2146:	a0 e4       	ldi	r26, 0x40	; 64
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e0 e4       	ldi	r30, 0x40	; 64
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	82 60       	ori	r24, 0x02	; 2
    2152:	8c 93       	st	X, r24
		UCSRC|=(1<<UCSZ1);
    2154:	a0 e4       	ldi	r26, 0x40	; 64
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 e4       	ldi	r30, 0x40	; 64
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	84 60       	ori	r24, 0x04	; 4
    2160:	8c 93       	st	X, r24
		UCSRB|=(1<<UCSZ2);
    2162:	aa e2       	ldi	r26, 0x2A	; 42
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	ea e2       	ldi	r30, 0x2A	; 42
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	84 60       	ori	r24, 0x04	; 4
    216e:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    2170:	eb 81       	ldd	r30, Y+3	; 0x03
    2172:	fc 81       	ldd	r31, Y+4	; 0x04
    2174:	83 81       	ldd	r24, Z+3	; 0x03
    2176:	94 81       	ldd	r25, Z+4	; 0x04
    2178:	a5 81       	ldd	r26, Z+5	; 0x05
    217a:	b6 81       	ldd	r27, Z+6	; 0x06
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	aa 1f       	adc	r26, r26
    2192:	bb 1f       	adc	r27, r27
    2194:	9c 01       	movw	r18, r24
    2196:	ad 01       	movw	r20, r26
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	92 e1       	ldi	r25, 0x12	; 18
    219c:	aa e7       	ldi	r26, 0x7A	; 122
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 90 11 	call	0x2320	; 0x2320 <__udivmodsi4>
    21a8:	da 01       	movw	r26, r20
    21aa:	c9 01       	movw	r24, r18
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    21b2:	e0 e4       	ldi	r30, 0x40	; 64
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	89 2f       	mov	r24, r25
    21bc:	99 27       	eor	r25, r25
    21be:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    21c0:	e9 e2       	ldi	r30, 0x29	; 41
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	80 83       	st	Z, r24

}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21e2:	eb e2       	ldi	r30, 0x2B	; 43
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	80 72       	andi	r24, 0x20	; 32
    21ee:	90 70       	andi	r25, 0x00	; 0
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	b9 f3       	breq	.-18     	; 0x21e2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    21f4:	ec e2       	ldi	r30, 0x2C	; 44
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    220c:	eb e2       	ldi	r30, 0x2B	; 43
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	88 23       	and	r24, r24
    2214:	dc f7       	brge	.-10     	; 0x220c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2216:	ec e2       	ldi	r30, 0x2C	; 44
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
}
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <UART_sendString+0x6>
    2228:	0f 92       	push	r0
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	9b 83       	std	Y+3, r25	; 0x03
    2230:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	0e c0       	rjmp	.+28     	; 0x2252 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	fc 01       	movw	r30, r24
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	80 81       	ld	r24, Z
    2248:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <UART_sendByte>
		i++;
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	9b 81       	ldd	r25, Y+3	; 0x03
    225c:	fc 01       	movw	r30, r24
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	39 f7       	brne	.-50     	; 0x2236 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <UART_receiveString+0xa>
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2288:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	9b 81       	ldd	r25, Y+3	; 0x03
    2294:	8c 01       	movw	r16, r24
    2296:	02 0f       	add	r16, r18
    2298:	13 1f       	adc	r17, r19
    229a:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    229e:	f8 01       	movw	r30, r16
    22a0:	80 83       	st	Z, r24
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	8c 01       	movw	r16, r24
    22b6:	02 0f       	add	r16, r18
    22b8:	13 1f       	adc	r17, r19
    22ba:	0e 94 02 11 	call	0x2204	; 0x2204 <UART_recieveByte>
    22be:	f8 01       	movw	r30, r16
    22c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	fc 01       	movw	r30, r24
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	80 81       	ld	r24, Z
    22d4:	83 32       	cpi	r24, 0x23	; 35
    22d6:	31 f7       	brne	.-52     	; 0x22a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	fc 01       	movw	r30, r24
    22e4:	e2 0f       	add	r30, r18
    22e6:	f3 1f       	adc	r31, r19
    22e8:	10 82       	st	Z, r1
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <__divmodhi4>:
    22fa:	97 fb       	bst	r25, 7
    22fc:	09 2e       	mov	r0, r25
    22fe:	07 26       	eor	r0, r23
    2300:	0a d0       	rcall	.+20     	; 0x2316 <__divmodhi4_neg1>
    2302:	77 fd       	sbrc	r23, 7
    2304:	04 d0       	rcall	.+8      	; 0x230e <__divmodhi4_neg2>
    2306:	2e d0       	rcall	.+92     	; 0x2364 <__udivmodhi4>
    2308:	06 d0       	rcall	.+12     	; 0x2316 <__divmodhi4_neg1>
    230a:	00 20       	and	r0, r0
    230c:	1a f4       	brpl	.+6      	; 0x2314 <__divmodhi4_exit>

0000230e <__divmodhi4_neg2>:
    230e:	70 95       	com	r23
    2310:	61 95       	neg	r22
    2312:	7f 4f       	sbci	r23, 0xFF	; 255

00002314 <__divmodhi4_exit>:
    2314:	08 95       	ret

00002316 <__divmodhi4_neg1>:
    2316:	f6 f7       	brtc	.-4      	; 0x2314 <__divmodhi4_exit>
    2318:	90 95       	com	r25
    231a:	81 95       	neg	r24
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	08 95       	ret

00002320 <__udivmodsi4>:
    2320:	a1 e2       	ldi	r26, 0x21	; 33
    2322:	1a 2e       	mov	r1, r26
    2324:	aa 1b       	sub	r26, r26
    2326:	bb 1b       	sub	r27, r27
    2328:	fd 01       	movw	r30, r26
    232a:	0d c0       	rjmp	.+26     	; 0x2346 <__udivmodsi4_ep>

0000232c <__udivmodsi4_loop>:
    232c:	aa 1f       	adc	r26, r26
    232e:	bb 1f       	adc	r27, r27
    2330:	ee 1f       	adc	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	a2 17       	cp	r26, r18
    2336:	b3 07       	cpc	r27, r19
    2338:	e4 07       	cpc	r30, r20
    233a:	f5 07       	cpc	r31, r21
    233c:	20 f0       	brcs	.+8      	; 0x2346 <__udivmodsi4_ep>
    233e:	a2 1b       	sub	r26, r18
    2340:	b3 0b       	sbc	r27, r19
    2342:	e4 0b       	sbc	r30, r20
    2344:	f5 0b       	sbc	r31, r21

00002346 <__udivmodsi4_ep>:
    2346:	66 1f       	adc	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	1a 94       	dec	r1
    2350:	69 f7       	brne	.-38     	; 0x232c <__udivmodsi4_loop>
    2352:	60 95       	com	r22
    2354:	70 95       	com	r23
    2356:	80 95       	com	r24
    2358:	90 95       	com	r25
    235a:	9b 01       	movw	r18, r22
    235c:	ac 01       	movw	r20, r24
    235e:	bd 01       	movw	r22, r26
    2360:	cf 01       	movw	r24, r30
    2362:	08 95       	ret

00002364 <__udivmodhi4>:
    2364:	aa 1b       	sub	r26, r26
    2366:	bb 1b       	sub	r27, r27
    2368:	51 e1       	ldi	r21, 0x11	; 17
    236a:	07 c0       	rjmp	.+14     	; 0x237a <__udivmodhi4_ep>

0000236c <__udivmodhi4_loop>:
    236c:	aa 1f       	adc	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	a6 17       	cp	r26, r22
    2372:	b7 07       	cpc	r27, r23
    2374:	10 f0       	brcs	.+4      	; 0x237a <__udivmodhi4_ep>
    2376:	a6 1b       	sub	r26, r22
    2378:	b7 0b       	sbc	r27, r23

0000237a <__udivmodhi4_ep>:
    237a:	88 1f       	adc	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	5a 95       	dec	r21
    2380:	a9 f7       	brne	.-22     	; 0x236c <__udivmodhi4_loop>
    2382:	80 95       	com	r24
    2384:	90 95       	com	r25
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	08 95       	ret

0000238c <__prologue_saves__>:
    238c:	2f 92       	push	r2
    238e:	3f 92       	push	r3
    2390:	4f 92       	push	r4
    2392:	5f 92       	push	r5
    2394:	6f 92       	push	r6
    2396:	7f 92       	push	r7
    2398:	8f 92       	push	r8
    239a:	9f 92       	push	r9
    239c:	af 92       	push	r10
    239e:	bf 92       	push	r11
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	ca 1b       	sub	r28, r26
    23b6:	db 0b       	sbc	r29, r27
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	09 94       	ijmp

000023c4 <__epilogue_restores__>:
    23c4:	2a 88       	ldd	r2, Y+18	; 0x12
    23c6:	39 88       	ldd	r3, Y+17	; 0x11
    23c8:	48 88       	ldd	r4, Y+16	; 0x10
    23ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    23cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    23d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23d6:	b9 84       	ldd	r11, Y+9	; 0x09
    23d8:	c8 84       	ldd	r12, Y+8	; 0x08
    23da:	df 80       	ldd	r13, Y+7	; 0x07
    23dc:	ee 80       	ldd	r14, Y+6	; 0x06
    23de:	fd 80       	ldd	r15, Y+5	; 0x05
    23e0:	0c 81       	ldd	r16, Y+4	; 0x04
    23e2:	1b 81       	ldd	r17, Y+3	; 0x03
    23e4:	aa 81       	ldd	r26, Y+2	; 0x02
    23e6:	b9 81       	ldd	r27, Y+1	; 0x01
    23e8:	ce 0f       	add	r28, r30
    23ea:	d1 1d       	adc	r29, r1
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	ed 01       	movw	r28, r26
    23f8:	08 95       	ret

000023fa <_exit>:
    23fa:	f8 94       	cli

000023fc <__stop_program>:
    23fc:	ff cf       	rjmp	.-2      	; 0x23fc <__stop_program>
