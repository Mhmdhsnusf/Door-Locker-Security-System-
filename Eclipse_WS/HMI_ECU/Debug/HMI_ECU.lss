
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  000035d8  0000366c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080013c  0080013c  00003748  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e5  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000993e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a829  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>

	}
	else{
		switch(port_num){
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		case 0:

			if(value==LOGIC_HIGH){
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;

		case 1:
			if(value==LOGIC_HIGH){
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;

		case 2:
			if(value==LOGIC_HIGH){
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;

		case 3:
			if(value==LOGIC_HIGH){
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
     f04:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>

	}
	else{
		switch(port_num){
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		case 0:
			if(BIT_IS_SET(PINA,pin_num)){
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
				temp = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;

		case 1:
			if(BIT_IS_SET(PINB,pin_num)){
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
				temp = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}

			break;

		case 2:
			if(BIT_IS_SET(PINC,pin_num)){
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
				temp = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;

		case 3:
			if(BIT_IS_SET(PIND,pin_num)){
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
				temp = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}

			break;
		}
	}
	return temp;
    1016:	89 81       	ldd	r24, Y+1	; 0x01

}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}

	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
	 * Description :
	 * Read and return the value of the required port.
	 * If the input port number is not correct, The function will return ZERO value.
	 */
	uint8 GPIO_readPort(uint8 port_num)
	{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
		uint8 temp=0;
    1146:	19 82       	std	Y+1, r1	; 0x01

		if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
			/* Do Nothing */
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
			{
			case 0:
				temp=PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>

				break;
			case PORTB_ID:
				temp=PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
				break;
			case PORTC_ID:
				temp=PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
				break;
			case PORTD_ID:
				temp=PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		return temp;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
	}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
static uint8 application_sequence_MC1=0; /*Controls HMI_ECU MC application sequence*/
/*******************************************************************************
 *                      Main Function                         				   *
 *******************************************************************************/
int main(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	e7 97       	sbiw	r28, 0x37	; 55
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    11d6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_init>
	UART_ConfigType UART_Config = {8,1,UART_STOP_1BIT_SELECT,9600};/*UART configurations*/
    11da:	9e 01       	movw	r18, r28
    11dc:	21 5e       	subi	r18, 0xE1	; 225
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	3f a7       	std	Y+47, r19	; 0x2f
    11e2:	2e a7       	std	Y+46, r18	; 0x2e
    11e4:	84 e3       	ldi	r24, 0x34	; 52
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	99 ab       	std	Y+49, r25	; 0x31
    11ea:	88 ab       	std	Y+48, r24	; 0x30
    11ec:	97 e0       	ldi	r25, 0x07	; 7
    11ee:	9a ab       	std	Y+50, r25	; 0x32
    11f0:	e8 a9       	ldd	r30, Y+48	; 0x30
    11f2:	f9 a9       	ldd	r31, Y+49	; 0x31
    11f4:	00 80       	ld	r0, Z
    11f6:	28 a9       	ldd	r18, Y+48	; 0x30
    11f8:	39 a9       	ldd	r19, Y+49	; 0x31
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	39 ab       	std	Y+49, r19	; 0x31
    1200:	28 ab       	std	Y+48, r18	; 0x30
    1202:	ee a5       	ldd	r30, Y+46	; 0x2e
    1204:	ff a5       	ldd	r31, Y+47	; 0x2f
    1206:	00 82       	st	Z, r0
    1208:	2e a5       	ldd	r18, Y+46	; 0x2e
    120a:	3f a5       	ldd	r19, Y+47	; 0x2f
    120c:	2f 5f       	subi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	3f a7       	std	Y+47, r19	; 0x2f
    1212:	2e a7       	std	Y+46, r18	; 0x2e
    1214:	3a a9       	ldd	r19, Y+50	; 0x32
    1216:	31 50       	subi	r19, 0x01	; 1
    1218:	3a ab       	std	Y+50, r19	; 0x32
    121a:	8a a9       	ldd	r24, Y+50	; 0x32
    121c:	88 23       	and	r24, r24
    121e:	41 f7       	brne	.-48     	; 0x11f0 <main+0x2e>
	UART_init(&UART_Config); /*Initializing UART*/
    1220:	ce 01       	movw	r24, r28
    1222:	4f 96       	adiw	r24, 0x1f	; 31
    1224:	0e 94 c0 18 	call	0x3180	; 0x3180 <UART_init>
	Timer1_ConfigType  Config_Ptr = {0,0,Prescaler_1024,Overflow_Mode};/*Timer1 Configurations*/
    1228:	fe 01       	movw	r30, r28
    122a:	b6 96       	adiw	r30, 0x26	; 38
    122c:	fc ab       	std	Y+52, r31	; 0x34
    122e:	eb ab       	std	Y+51, r30	; 0x33
    1230:	2e e2       	ldi	r18, 0x2E	; 46
    1232:	31 e0       	ldi	r19, 0x01	; 1
    1234:	3e ab       	std	Y+54, r19	; 0x36
    1236:	2d ab       	std	Y+53, r18	; 0x35
    1238:	36 e0       	ldi	r19, 0x06	; 6
    123a:	3f ab       	std	Y+55, r19	; 0x37
    123c:	ed a9       	ldd	r30, Y+53	; 0x35
    123e:	fe a9       	ldd	r31, Y+54	; 0x36
    1240:	00 80       	ld	r0, Z
    1242:	2d a9       	ldd	r18, Y+53	; 0x35
    1244:	3e a9       	ldd	r19, Y+54	; 0x36
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	3e ab       	std	Y+54, r19	; 0x36
    124c:	2d ab       	std	Y+53, r18	; 0x35
    124e:	eb a9       	ldd	r30, Y+51	; 0x33
    1250:	fc a9       	ldd	r31, Y+52	; 0x34
    1252:	00 82       	st	Z, r0
    1254:	2b a9       	ldd	r18, Y+51	; 0x33
    1256:	3c a9       	ldd	r19, Y+52	; 0x34
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	3c ab       	std	Y+52, r19	; 0x34
    125e:	2b ab       	std	Y+51, r18	; 0x33
    1260:	3f a9       	ldd	r19, Y+55	; 0x37
    1262:	31 50       	subi	r19, 0x01	; 1
    1264:	3f ab       	std	Y+55, r19	; 0x37
    1266:	8f a9       	ldd	r24, Y+55	; 0x37
    1268:	88 23       	and	r24, r24
    126a:	41 f7       	brne	.-48     	; 0x123c <main+0x7a>
	LCD_clearScreen();
    126c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door Lock System");
    1270:	20 e6       	ldi	r18, 0x60	; 96
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0," Mohamed Hassan ");
    127e:	21 e7       	ldi	r18, 0x71	; 113
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	a9 01       	movw	r20, r18
    1288:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e8       	ldi	r25, 0x80	; 128
    1290:	ab e3       	ldi	r26, 0x3B	; 59
    1292:	b5 e4       	ldi	r27, 0x45	; 69
    1294:	89 8f       	std	Y+25, r24	; 0x19
    1296:	9a 8f       	std	Y+26, r25	; 0x1a
    1298:	ab 8f       	std	Y+27, r26	; 0x1b
    129a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129c:	69 8d       	ldd	r22, Y+25	; 0x19
    129e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a ef       	ldi	r20, 0xFA	; 250
    12aa:	54 e4       	ldi	r21, 0x44	; 68
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	8d 8b       	std	Y+21, r24	; 0x15
    12b6:	9e 8b       	std	Y+22, r25	; 0x16
    12b8:	af 8b       	std	Y+23, r26	; 0x17
    12ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12bc:	6d 89       	ldd	r22, Y+21	; 0x15
    12be:	7e 89       	ldd	r23, Y+22	; 0x16
    12c0:	8f 89       	ldd	r24, Y+23	; 0x17
    12c2:	98 8d       	ldd	r25, Y+24	; 0x18
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	2c f4       	brge	.+10     	; 0x12de <main+0x11c>
		__ticks = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	3f c0       	rjmp	.+126    	; 0x135c <main+0x19a>
	else if (__tmp > 65535)
    12de:	6d 89       	ldd	r22, Y+21	; 0x15
    12e0:	7e 89       	ldd	r23, Y+22	; 0x16
    12e2:	8f 89       	ldd	r24, Y+23	; 0x17
    12e4:	98 8d       	ldd	r25, Y+24	; 0x18
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f2:	18 16       	cp	r1, r24
    12f4:	4c f5       	brge	.+82     	; 0x1348 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f6:	69 8d       	ldd	r22, Y+25	; 0x19
    12f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
    131e:	0f c0       	rjmp	.+30     	; 0x133e <main+0x17c>
    1320:	88 ec       	ldi	r24, 0xC8	; 200
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9a 8b       	std	Y+18, r25	; 0x12
    1326:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1328:	89 89       	ldd	r24, Y+17	; 0x11
    132a:	9a 89       	ldd	r25, Y+18	; 0x12
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <main+0x16a>
    1330:	9a 8b       	std	Y+18, r25	; 0x12
    1332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	8b 89       	ldd	r24, Y+19	; 0x13
    1336:	9c 89       	ldd	r25, Y+20	; 0x14
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	9c 8b       	std	Y+20, r25	; 0x14
    133c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133e:	8b 89       	ldd	r24, Y+19	; 0x13
    1340:	9c 89       	ldd	r25, Y+20	; 0x14
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	69 f7       	brne	.-38     	; 0x1320 <main+0x15e>
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1348:	6d 89       	ldd	r22, Y+21	; 0x15
    134a:	7e 89       	ldd	r23, Y+22	; 0x16
    134c:	8f 89       	ldd	r24, Y+23	; 0x17
    134e:	98 8d       	ldd	r25, Y+24	; 0x18
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	9c 8b       	std	Y+20, r25	; 0x14
    135a:	8b 8b       	std	Y+19, r24	; 0x13
    135c:	8b 89       	ldd	r24, Y+19	; 0x13
    135e:	9c 89       	ldd	r25, Y+20	; 0x14
    1360:	98 8b       	std	Y+16, r25	; 0x10
    1362:	8f 87       	std	Y+15, r24	; 0x0f
    1364:	8f 85       	ldd	r24, Y+15	; 0x0f
    1366:	98 89       	ldd	r25, Y+16	; 0x10
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <main+0x1a6>
    136c:	98 8b       	std	Y+16, r25	; 0x10
    136e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);
	while(1)
	{
		switch(application_sequence_MC1)
    1370:	80 91 3c 01 	lds	r24, 0x013C
    1374:	e8 2f       	mov	r30, r24
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	fd a7       	std	Y+45, r31	; 0x2d
    137a:	ec a7       	std	Y+44, r30	; 0x2c
    137c:	2c a5       	ldd	r18, Y+44	; 0x2c
    137e:	3d a5       	ldd	r19, Y+45	; 0x2d
    1380:	21 30       	cpi	r18, 0x01	; 1
    1382:	31 05       	cpc	r19, r1
    1384:	31 f1       	breq	.+76     	; 0x13d2 <main+0x210>
    1386:	8c a5       	ldd	r24, Y+44	; 0x2c
    1388:	9d a5       	ldd	r25, Y+45	; 0x2d
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	91 05       	cpc	r25, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <main+0x1d8>
    1390:	ec a5       	ldd	r30, Y+44	; 0x2c
    1392:	fd a5       	ldd	r31, Y+45	; 0x2d
    1394:	30 97       	sbiw	r30, 0x00	; 0
    1396:	69 f0       	breq	.+26     	; 0x13b2 <main+0x1f0>
    1398:	eb cf       	rjmp	.-42     	; 0x1370 <main+0x1ae>
    139a:	2c a5       	ldd	r18, Y+44	; 0x2c
    139c:	3d a5       	ldd	r19, Y+45	; 0x2d
    139e:	23 30       	cpi	r18, 0x03	; 3
    13a0:	31 05       	cpc	r19, r1
    13a2:	21 f1       	breq	.+72     	; 0x13ec <main+0x22a>
    13a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    13a6:	9d a5       	ldd	r25, Y+45	; 0x2d
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <main+0x1ee>
    13ae:	7d c0       	rjmp	.+250    	; 0x14aa <main+0x2e8>
    13b0:	df cf       	rjmp	.-66     	; 0x1370 <main+0x1ae>
		{
		case CREATE_PASSWORD:
		{
			start_Function(); /*Starting the program*/
    13b2:	0e 94 06 0b 	call	0x160c	; 0x160c <start_Function>
			send_Password(g_Pass_array1);/*Sending the entered password to Control_ECU*/
    13b6:	8d e3       	ldi	r24, 0x3D	; 61
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <send_Password>
			send_Password(g_Pass_array2);/*Sending the re-entered password to Control_ECU*/
    13be:	82 e4       	ldi	r24, 0x42	; 66
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <send_Password>
			application_sequence_MC1++; /* Jump to the next step (Checking Step)*/
    13c6:	80 91 3c 01 	lds	r24, 0x013C
    13ca:	8f 5f       	subi	r24, 0xFF	; 255
    13cc:	80 93 3c 01 	sts	0x013C, r24
    13d0:	cf cf       	rjmp	.-98     	; 0x1370 <main+0x1ae>

		}
		case CHECKING_PASSWORDS_MATCHING:
		{
			/*Check if the Control_ECU returns that the two passwords are matched or not*/
			if(check_Password()!=MATCHED)
    13d2:	0e 94 1e 0c 	call	0x183c	; 0x183c <check_Password>
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <main+0x21e>
			{
				application_sequence_MC1=0; /*if the two passwords are not matched returns to step (Ask for password again)*/
    13da:	10 92 3c 01 	sts	0x013C, r1
    13de:	c8 cf       	rjmp	.-112    	; 0x1370 <main+0x1ae>
			}
			else
			{
				application_sequence_MC1+=2; /*Jump to the next step*/
    13e0:	80 91 3c 01 	lds	r24, 0x013C
    13e4:	8e 5f       	subi	r24, 0xFE	; 254
    13e6:	80 93 3c 01 	sts	0x013C, r24
    13ea:	c2 cf       	rjmp	.-124    	; 0x1370 <main+0x1ae>
			}
			break;
		}
		case MAIN_OPTIONS_DISPLAY :
		{
			uint8 user_choice=main_Options();/*Displaying main options and returns user choice*/
    13ec:	0e 94 3e 0c 	call	0x187c	; 0x187c <main_Options>
    13f0:	8e 8f       	std	Y+30, r24	; 0x1e
			if(recieveByte()) /*if the password is matched with the one stored in the EEPROM*/
    13f2:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <recieveByte>
    13f6:	88 23       	and	r24, r24
    13f8:	41 f0       	breq	.+16     	; 0x140a <main+0x248>
			{
				sendByte(user_choice); /*Sends the user choice to Control_ECU (Open Door/Change password)*/
    13fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13fc:	0e 94 92 0c 	call	0x1924	; 0x1924 <sendByte>
				application_sequence_MC1=recieveByte();
    1400:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <recieveByte>
    1404:	80 93 3c 01 	sts	0x013C, r24
    1408:	b3 cf       	rjmp	.-154    	; 0x1370 <main+0x1ae>
				 * the function which is responsible for the choice he chose (Open Door/Change password)
				 * else
				 * Display at the LCD that the system is blocked for 1 min
				 * After the 1 min ends return to the main options display
				 */
				for(i=0;i<2;i++)
    140a:	1d 8e       	std	Y+29, r1	; 0x1d
    140c:	25 c0       	rjmp	.+74     	; 0x1458 <main+0x296>
				{
					LCD_clearScreen();
    140e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
					LCD_moveCursor(0, 0);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
					LCD_displayString("Plz enter old ");
    141a:	82 e8       	ldi	r24, 0x82	; 130
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
					LCD_moveCursor(1, 0);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
					LCD_displayString("pass:");
    142a:	81 e9       	ldi	r24, 0x91	; 145
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
					create_Password(&g_Pass_array1);
    1432:	8d e3       	ldi	r24, 0x3D	; 61
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 39 0b 	call	0x1672	; 0x1672 <create_Password>
					send_Password(&g_Pass_array1);
    143a:	8d e3       	ldi	r24, 0x3D	; 61
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <send_Password>
					if(recieveByte()==MATCHED)
    1442:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <recieveByte>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	21 f4       	brne	.+8      	; 0x1452 <main+0x290>
					{
						application_sequence_MC1=3;
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	80 93 3c 01 	sts	0x013C, r24
    1450:	06 c0       	rjmp	.+12     	; 0x145e <main+0x29c>
				 * the function which is responsible for the choice he chose (Open Door/Change password)
				 * else
				 * Display at the LCD that the system is blocked for 1 min
				 * After the 1 min ends return to the main options display
				 */
				for(i=0;i<2;i++)
    1452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	8d 8f       	std	Y+29, r24	; 0x1d
    1458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	c0 f2       	brcs	.-80     	; 0x140e <main+0x24c>
						application_sequence_MC1=3;
						break;

					}
				}
				if(i==2)
    145e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	09 f0       	breq	.+2      	; 0x1466 <main+0x2a4>
    1464:	85 cf       	rjmp	.-246    	; 0x1370 <main+0x1ae>
				{
					LCD_clearScreen();
    1466:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
					Timer1_init(&Config_Ptr);/*Initialize Timer 1*/
    146a:	ce 01       	movw	r24, r28
    146c:	86 96       	adiw	r24, 0x26	; 38
    146e:	0e 94 2a 18 	call	0x3054	; 0x3054 <Timer1_init>
					Timer1_setCallBack(lcd_Buzzer_Disply);/*Set Timer 1 callback to LCD_Buzzer_Disply function*/
    1472:	86 eb       	ldi	r24, 0xB6	; 182
    1474:	9c e0       	ldi	r25, 0x0C	; 12
    1476:	0e 94 ae 18 	call	0x315c	; 0x315c <Timer1_setCallBack>
    147a:	07 c0       	rjmp	.+14     	; 0x148a <main+0x2c8>
					while(g_tick_buzzer != 8)/*Display that the system is blocked for 1 min*/
					{
						LCD_displayStringRowColumn(0,0,"BLOCKED 1 MIN");
    147c:	27 e9       	ldi	r18, 0x97	; 151
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
				if(i==2)
				{
					LCD_clearScreen();
					Timer1_init(&Config_Ptr);/*Initialize Timer 1*/
					Timer1_setCallBack(lcd_Buzzer_Disply);/*Set Timer 1 callback to LCD_Buzzer_Disply function*/
					while(g_tick_buzzer != 8)/*Display that the system is blocked for 1 min*/
    148a:	80 91 48 01 	lds	r24, 0x0148
    148e:	88 30       	cpi	r24, 0x08	; 8
    1490:	a9 f7       	brne	.-22     	; 0x147c <main+0x2ba>
					{
						LCD_displayStringRowColumn(0,0,"BLOCKED 1 MIN");

					}
					if(g_tick_motor==8)
    1492:	80 91 47 01 	lds	r24, 0x0147
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	21 f4       	brne	.+8      	; 0x14a2 <main+0x2e0>
					{
						Timer1_deInit();
    149a:	0e 94 91 18 	call	0x3122	; 0x3122 <Timer1_deInit>
						g_tick_buzzer=0;
    149e:	10 92 48 01 	sts	0x0148, r1
					}
					/*Return to main options display*/
					application_sequence_MC1=3;
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	80 93 3c 01 	sts	0x013C, r24
    14a8:	63 cf       	rjmp	.-314    	; 0x1370 <main+0x1ae>
			break;
		}
		case OPEN_DOOR:
		{

			Timer1_init(&Config_Ptr);/*Initialize Timer 1*/
    14aa:	ce 01       	movw	r24, r28
    14ac:	86 96       	adiw	r24, 0x26	; 38
    14ae:	0e 94 2a 18 	call	0x3054	; 0x3054 <Timer1_init>
			Timer1_setCallBack(&lcd_Motor_Disply);/*Set Timer 1 callback to LCD_Motor_Disply function*/
    14b2:	8a ea       	ldi	r24, 0xAA	; 170
    14b4:	9c e0       	ldi	r25, 0x0C	; 12
    14b6:	0e 94 ae 18 	call	0x315c	; 0x315c <Timer1_setCallBack>
			LCD_clearScreen();
    14ba:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <main+0x30c>
			while(g_tick_motor < 2)/*Display that the door is unlocking for 15 sec*/
			{
				LCD_displayStringRowColumn(0,0," DOOR UNLOCKING ");
    14c0:	25 ea       	ldi	r18, 0xA5	; 165
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
		{

			Timer1_init(&Config_Ptr);/*Initialize Timer 1*/
			Timer1_setCallBack(&lcd_Motor_Disply);/*Set Timer 1 callback to LCD_Motor_Disply function*/
			LCD_clearScreen();
			while(g_tick_motor < 2)/*Display that the door is unlocking for 15 sec*/
    14ce:	80 91 47 01 	lds	r24, 0x0147
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	a8 f3       	brcs	.-22     	; 0x14c0 <main+0x2fe>
			{
				LCD_displayStringRowColumn(0,0," DOOR UNLOCKING ");
			}
			if(g_tick_motor == 2)/*Clear the LCD display for 3 sec*/
    14d6:	80 91 47 01 	lds	r24, 0x0147
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <main+0x31e>
    14de:	82 c0       	rjmp	.+260    	; 0x15e4 <main+0x422>
			{
				LCD_clearScreen();
    14e0:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
				Timer1_deInit();
    14e4:	0e 94 91 18 	call	0x3122	; 0x3122 <Timer1_deInit>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e8       	ldi	r25, 0x80	; 128
    14ec:	ab e3       	ldi	r26, 0x3B	; 59
    14ee:	b5 e4       	ldi	r27, 0x45	; 69
    14f0:	8b 87       	std	Y+11, r24	; 0x0b
    14f2:	9c 87       	std	Y+12, r25	; 0x0c
    14f4:	ad 87       	std	Y+13, r26	; 0x0d
    14f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4a ef       	ldi	r20, 0xFA	; 250
    1506:	54 e4       	ldi	r21, 0x44	; 68
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8f 83       	std	Y+7, r24	; 0x07
    1512:	98 87       	std	Y+8, r25	; 0x08
    1514:	a9 87       	std	Y+9, r26	; 0x09
    1516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152c:	88 23       	and	r24, r24
    152e:	2c f4       	brge	.+10     	; 0x153a <main+0x378>
		__ticks = 1;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	3f c0       	rjmp	.+126    	; 0x15b8 <main+0x3f6>
	else if (__tmp > 65535)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154e:	18 16       	cp	r1, r24
    1550:	4c f5       	brge	.+82     	; 0x15a4 <main+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1552:	6b 85       	ldd	r22, Y+11	; 0x0b
    1554:	7c 85       	ldd	r23, Y+12	; 0x0c
    1556:	8d 85       	ldd	r24, Y+13	; 0x0d
    1558:	9e 85       	ldd	r25, Y+14	; 0x0e
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	0f c0       	rjmp	.+30     	; 0x159a <main+0x3d8>
    157c:	88 ec       	ldi	r24, 0xC8	; 200
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <main+0x3c6>
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f7       	brne	.-38     	; 0x157c <main+0x3ba>
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <main+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <main+0x402>
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(3000);
				Timer1_init(&Config_Ptr);
    15cc:	ce 01       	movw	r24, r28
    15ce:	86 96       	adiw	r24, 0x26	; 38
    15d0:	0e 94 2a 18 	call	0x3054	; 0x3054 <Timer1_init>
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <main+0x422>
			}
			while(g_tick_motor>= 2 && g_tick_motor < 4)/*Display that the door is locking for 15 sec*/
			{
				LCD_displayStringRowColumn(0,0,"DOOR LOCKING");
    15d6:	26 eb       	ldi	r18, 0xB6	; 182
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	a9 01       	movw	r20, r18
    15e0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
				LCD_clearScreen();
				Timer1_deInit();
				_delay_ms(3000);
				Timer1_init(&Config_Ptr);
			}
			while(g_tick_motor>= 2 && g_tick_motor < 4)/*Display that the door is locking for 15 sec*/
    15e4:	80 91 47 01 	lds	r24, 0x0147
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	20 f0       	brcs	.+8      	; 0x15f4 <main+0x432>
    15ec:	80 91 47 01 	lds	r24, 0x0147
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	88 f3       	brcs	.-30     	; 0x15d6 <main+0x414>
			{
				LCD_displayStringRowColumn(0,0,"DOOR LOCKING");
			}
			if(g_tick_motor==4)
    15f4:	80 91 47 01 	lds	r24, 0x0147
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	21 f4       	brne	.+8      	; 0x1604 <main+0x442>
			{
				Timer1_deInit();
    15fc:	0e 94 91 18 	call	0x3122	; 0x3122 <Timer1_deInit>
				g_tick_motor=0;
    1600:	10 92 47 01 	sts	0x0147, r1
			}
			application_sequence_MC1=3;/*Return to main options display*/
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 93 3c 01 	sts	0x013C, r24
    160a:	b2 ce       	rjmp	.-668    	; 0x1370 <main+0x1ae>

0000160c <start_Function>:
 * Functional responsible for :
 * 1. Displaying enter/re-enter password on LCD
 * 2. Call create_Password function to take & store password from user
 */
void start_Function(void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1614:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("Plz enter pass: ");
    1620:	83 ec       	ldi	r24, 0xC3	; 195
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
	LCD_moveCursor(1, 0);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	create_Password(&g_Pass_array1);
    1630:	8d e3       	ldi	r24, 0x3D	; 61
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 39 0b 	call	0x1672	; 0x1672 <create_Password>
	LCD_moveCursor(0, 0);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_clearScreen();
    1640:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_displayString("Plz re-enter the  ");
    1644:	84 ed       	ldi	r24, 0xD4	; 212
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
	LCD_moveCursor(1, 0);
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("same pass: ");
    1654:	87 ee       	ldi	r24, 0xE7	; 231
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
	LCD_moveCursor(1, 10);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	6a e0       	ldi	r22, 0x0A	; 10
    1660:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	create_Password(&g_Pass_array2);
    1664:	82 e4       	ldi	r24, 0x42	; 66
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 39 0b 	call	0x1672	; 0x1672 <create_Password>
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <create_Password>:
 * Functional responsible for :
 * 1. Taking password entered by the user
 * 2. Storing it in the array passed to it
 */
void create_Password(uint8 *Password_array)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	62 97       	sbiw	r28, 0x12	; 18
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	9a 8b       	std	Y+18, r25	; 0x12
    1688:	89 8b       	std	Y+17, r24	; 0x11
	uint8 counter=0;
    168a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 pass_byte_holder=KEYPAD_getPressedKey();
    168c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <KEYPAD_getPressedKey>
    1690:	8f 87       	std	Y+15, r24	; 0x0f
    1692:	9b c0       	rjmp	.+310    	; 0x17ca <create_Password+0x158>
	while(pass_byte_holder != '=')
	{
		pass_byte_holder=KEYPAD_getPressedKey();
    1694:	0e 94 c2 0c 	call	0x1984	; 0x1984 <KEYPAD_getPressedKey>
    1698:	8f 87       	std	Y+15, r24	; 0x0f
		if( ( pass_byte_holder != '+' && pass_byte_holder != '-' && pass_byte_holder != '*' && pass_byte_holder != '%' && pass_byte_holder != '=') || (pass_byte_holder>= 0 && pass_byte_holder<= 9) )
    169a:	8f 85       	ldd	r24, Y+15	; 0x0f
    169c:	8b 32       	cpi	r24, 0x2B	; 43
    169e:	61 f0       	breq	.+24     	; 0x16b8 <create_Password+0x46>
    16a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a2:	8d 32       	cpi	r24, 0x2D	; 45
    16a4:	49 f0       	breq	.+18     	; 0x16b8 <create_Password+0x46>
    16a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a8:	8a 32       	cpi	r24, 0x2A	; 42
    16aa:	31 f0       	breq	.+12     	; 0x16b8 <create_Password+0x46>
    16ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ae:	85 32       	cpi	r24, 0x25	; 37
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <create_Password+0x46>
    16b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b4:	8d 33       	cpi	r24, 0x3D	; 61
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <create_Password+0x4e>
    16b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ba:	8a 30       	cpi	r24, 0x0A	; 10
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <create_Password+0x4e>
    16be:	85 c0       	rjmp	.+266    	; 0x17ca <create_Password+0x158>
		{
			if(counter < PASSWORD_SIZE )
    16c0:	88 89       	ldd	r24, Y+16	; 0x10
    16c2:	85 30       	cpi	r24, 0x05	; 5
    16c4:	80 f4       	brcc	.+32     	; 0x16e6 <create_Password+0x74>
			{
				Password_array[counter]=pass_byte_holder;
    16c6:	88 89       	ldd	r24, Y+16	; 0x10
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	89 89       	ldd	r24, Y+17	; 0x11
    16ce:	9a 89       	ldd	r25, Y+18	; 0x12
    16d0:	fc 01       	movw	r30, r24
    16d2:	e2 0f       	add	r30, r18
    16d4:	f3 1f       	adc	r31, r19
    16d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d8:	80 83       	st	Z, r24
				LCD_displayChar('*');
    16da:	8a e2       	ldi	r24, 0x2A	; 42
    16dc:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_displayChar>
				counter++;
    16e0:	88 89       	ldd	r24, Y+16	; 0x10
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	88 8b       	std	Y+16, r24	; 0x10
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e8       	ldi	r25, 0x80	; 128
    16ea:	ab eb       	ldi	r26, 0xBB	; 187
    16ec:	b4 e4       	ldi	r27, 0x44	; 68
    16ee:	8b 87       	std	Y+11, r24	; 0x0b
    16f0:	9c 87       	std	Y+12, r25	; 0x0c
    16f2:	ad 87       	std	Y+13, r26	; 0x0d
    16f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a ef       	ldi	r20, 0xFA	; 250
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8f 83       	std	Y+7, r24	; 0x07
    1710:	98 87       	std	Y+8, r25	; 0x08
    1712:	a9 87       	std	Y+9, r26	; 0x09
    1714:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1716:	6f 81       	ldd	r22, Y+7	; 0x07
    1718:	78 85       	ldd	r23, Y+8	; 0x08
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <create_Password+0xc6>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <create_Password+0x144>
	else if (__tmp > 65535)
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <create_Password+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6b 85       	ldd	r22, Y+11	; 0x0b
    1752:	7c 85       	ldd	r23, Y+12	; 0x0c
    1754:	8d 85       	ldd	r24, Y+13	; 0x0d
    1756:	9e 85       	ldd	r25, Y+14	; 0x0e
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <create_Password+0x126>
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <create_Password+0x114>
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <create_Password+0x108>
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <create_Password+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <create_Password+0x150>
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
 */
void create_Password(uint8 *Password_array)
{
	uint8 counter=0;
	uint8 pass_byte_holder=KEYPAD_getPressedKey();
	while(pass_byte_holder != '=')
    17ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    17cc:	8d 33       	cpi	r24, 0x3D	; 61
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <create_Password+0x160>
    17d0:	61 cf       	rjmp	.-318    	; 0x1694 <create_Password+0x22>
			}
			_delay_ms(1500);
		}
	}

}
    17d2:	62 96       	adiw	r28, 0x12	; 18
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <send_Password>:
 * Description :
 * Functional responsible for :
 * Sending Password entered by the user to Control_ECU through UART
 */
void send_Password(uint8 *Password_ptr1)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <send_Password+0x6>
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9b 83       	std	Y+3, r25	; 0x03
    17f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	UART_sendByte(READY);
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
	while(UART_recieveByte()!=READY);
    17fa:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    17fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1800:	e1 f7       	brne	.-8      	; 0x17fa <send_Password+0x16>
	for(i=0;i<PASSWORD_SIZE;i++)
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <send_Password+0x3e>
	{
		UART_sendByte(Password_ptr1[i]);
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	80 81       	ld	r24, Z
    1818:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
void send_Password(uint8 *Password_ptr1)
{
	uint8 i;
	UART_sendByte(READY);
	while(UART_recieveByte()!=READY);
	for(i=0;i<PASSWORD_SIZE;i++)
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	8f 5f       	subi	r24, 0xFF	; 255
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	85 30       	cpi	r24, 0x05	; 5
    1826:	78 f3       	brcs	.-34     	; 0x1806 <send_Password+0x22>
	{
		UART_sendByte(Password_ptr1[i]);
	}
	while(UART_recieveByte()!=DONE);
    1828:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    182c:	8e 3f       	cpi	r24, 0xFE	; 254
    182e:	e1 f7       	brne	.-8      	; 0x1828 <send_Password+0x44>

}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <check_Password>:
 * Functional responsible for :
 * 1. Receiving the result of the two passwords entered by the user (Matched/Not matched)
 * 2. Return the result
 */
uint8 check_Password()
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <check_Password+0x6>
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	uint8 state=-1;
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	89 83       	std	Y+1, r24	; 0x01
	state=recieveByte();
    184c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <recieveByte>
    1850:	89 83       	std	Y+1, r24	; 0x01
	if(state == UN_MATCHED)
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	88 23       	and	r24, r24
    1856:	11 f4       	brne	.+4      	; 0x185c <check_Password+0x20>
	{
		return UN_MATCHED;
    1858:	1a 82       	std	Y+2, r1	; 0x02
    185a:	07 c0       	rjmp	.+14     	; 0x186a <check_Password+0x2e>
	}
	else if (state == MATCHED)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	19 f4       	brne	.+6      	; 0x1868 <check_Password+0x2c>
	{
		return MATCHED;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8a 83       	std	Y+2, r24	; 0x02
    1866:	01 c0       	rjmp	.+2      	; 0x186a <check_Password+0x2e>
    1868:	02 c0       	rjmp	.+4      	; 0x186e <check_Password+0x32>
	}
}
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <main_Options>:
 * 5. Send the password entered by the user to Control_ECU to check if it's the correct passwored
 *    compared with the one saved in the EEPROM
 * 6. Return the user choice
 */
uint8 main_Options(void)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1886:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : OPEN DOOR");
    188a:	23 ef       	ldi	r18, 0xF3	; 243
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    1898:	21 e0       	ldi	r18, 0x01	; 1
    189a:	31 e0       	ldi	r19, 0x01	; 1
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <LCD_displayStringRowColumn>
	uint8 user_choice=KEYPAD_getPressedKey();
    18a6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <KEYPAD_getPressedKey>
    18aa:	89 83       	std	Y+1, r24	; 0x01
	while(user_choice != '+' && user_choice != '-'){};
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	8b 32       	cpi	r24, 0x2B	; 43
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <main_Options+0x3c>
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	8d 32       	cpi	r24, 0x2D	; 45
    18b6:	d1 f7       	brne	.-12     	; 0x18ac <main_Options+0x30>
	LCD_clearScreen();
    18b8:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("Plz enter old");
    18c4:	81 e1       	ldi	r24, 0x11	; 17
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
	LCD_moveCursor(1, 0);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("pass :");
    18d4:	8f e1       	ldi	r24, 0x1F	; 31
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
	create_Password(&g_Pass_array1);
    18dc:	8d e3       	ldi	r24, 0x3D	; 61
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	0e 94 39 0b 	call	0x1672	; 0x1672 <create_Password>
	send_Password(&g_Pass_array1);
    18e4:	8d e3       	ldi	r24, 0x3D	; 61
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <send_Password>
	return user_choice;
    18ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <recieveByte>:
 * Functional responsible for :
 * Syncing the UART in the Control_ECU and the UART in HMI_ECU
 * Receiving data from the UART in the Control_ECU
 */
uint8 recieveByte(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	uint8 byte;
	while(UART_recieveByte() != READY){};
    1900:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    1904:	8f 3f       	cpi	r24, 0xFF	; 255
    1906:	e1 f7       	brne	.-8      	; 0x1900 <recieveByte+0xa>
	UART_sendByte(READY);
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
	byte=UART_recieveByte();
    190e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    1912:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(DONE);
    1914:	8e ef       	ldi	r24, 0xFE	; 254
    1916:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
	return byte;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
}
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <sendByte>:
 * Functional responsible for :
 * Syncing the UART in the Control_ECU and the UART in HMI_ECU
 * Sending data to the UART in the Control_ECU
 */
void sendByte(uint8 byte)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	0f 92       	push	r0
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
	while(UART_recieveByte() != READY){};
    1936:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    193a:	8f 3f       	cpi	r24, 0xFF	; 255
    193c:	e1 f7       	brne	.-8      	; 0x1936 <sendByte+0x12>
	UART_sendByte(byte);
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
	while(UART_recieveByte() != DONE){};
    1944:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    1948:	8e 3f       	cpi	r24, 0xFE	; 254
    194a:	e1 f7       	brne	.-8      	; 0x1944 <sendByte+0x20>

}
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <lcd_Motor_Disply>:
/*
 * Description :
 * Function called when by the ISR when the overflow interrupt take place
 */
void lcd_Motor_Disply(void)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
	g_tick_motor++;
    195c:	80 91 47 01 	lds	r24, 0x0147
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	80 93 47 01 	sts	0x0147, r24

}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <lcd_Buzzer_Disply>:
/*
 * Description :
 * Function called when by the ISR when the overflow interrupt take place
 */
void lcd_Buzzer_Disply(void)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	g_tick_buzzer++;
    1974:	80 91 48 01 	lds	r24, 0x0148
    1978:	8f 5f       	subi	r24, 0xFF	; 255
    197a:	80 93 48 01 	sts	0x0148, r24
}
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void){
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <KEYPAD_getPressedKey+0x6>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	62 e0       	ldi	r22, 0x02	; 2
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( KEYPAD_COLS_PORT_ID,  KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	64 e0       	ldi	r22, 0x04	; 4
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( KEYPAD_COLS_PORT_ID,  KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	65 e0       	ldi	r22, 0x05	; 5
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( KEYPAD_COLS_PORT_ID,  KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	66 e0       	ldi	r22, 0x06	; 6
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(NUMBER_OF_COLS==4)
	GPIO_setupPinDirection(COLS_PORT_ID, FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1){
		uint8 row_number,col_number;
		for(row_number=0;row_number< KEYPAD_NUMBER_OF_ROWS;row_number++) /* loop for rows */
    19d4:	1a 82       	std	Y+2, r1	; 0x02
    19d6:	35 c0       	rjmp	.+106    	; 0x1a42 <KEYPAD_getPressedKey+0xbe>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+row_number, PIN_OUTPUT);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	6a 81       	ldd	r22, Y+2	; 0x02
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			/* Set/Clear the row output pin */
			GPIO_writePin( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+row_number, KEYPAD_BUTTON_PRESSED);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	6a 81       	ldd	r22, Y+2	; 0x02
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			for(col_number=0;col_number< KEYPAD_NUMBER_OF_COLS;col_number++) /* loop for columns */
    19ec:	19 82       	std	Y+1, r1	; 0x01
    19ee:	1e c0       	rjmp	.+60     	; 0x1a2c <KEYPAD_getPressedKey+0xa8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin( KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col_number)==KEYPAD_BUTTON_PRESSED)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	98 2f       	mov	r25, r24
    19f4:	9c 5f       	subi	r25, 0xFC	; 252
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	69 2f       	mov	r22, r25
    19fa:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    19fe:	88 23       	and	r24, r24
    1a00:	91 f4       	brne	.+36     	; 0x1a26 <KEYPAD_getPressedKey+0xa2>
#elif(KEYPAD_NUMBER_OF_COLS==4)
	#ifdef STANDARD_KEYPAD
					return ((row_number*KEYPAD_NUMBER_OF_COLS)+col_number+1);
	#else

					return (KEYPAD_4x4_adjustKeyNumber((row_number*KEYPAD_NUMBER_OF_COLS)+col_number+1));
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	98 2f       	mov	r25, r24
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	89 0f       	add	r24, r25
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+row_number, PIN_INPUT);
		}

	}
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+row_number, PIN_OUTPUT);
			/* Set/Clear the row output pin */
			GPIO_writePin( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+row_number, KEYPAD_BUTTON_PRESSED);
			for(col_number=0;col_number< KEYPAD_NUMBER_OF_COLS;col_number++) /* loop for columns */
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	f8 f2       	brcs	.-66     	; 0x19f0 <KEYPAD_getPressedKey+0x6c>
	#endif
#endif
				}

			}
			GPIO_setupPinDirection( KEYPAD_ROWS_PORT_ID,  KEYPAD_FIRST_ROW_PIN_ID+row_number, PIN_INPUT);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	6a 81       	ldd	r22, Y+2	; 0x02
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(NUMBER_OF_COLS==4)
	GPIO_setupPinDirection(COLS_PORT_ID, FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1){
		uint8 row_number,col_number;
		for(row_number=0;row_number< KEYPAD_NUMBER_OF_ROWS;row_number++) /* loop for rows */
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	8f 5f       	subi	r24, 0xFF	; 255
    1a40:	8a 83       	std	Y+2, r24	; 0x02
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	40 f2       	brcs	.-112    	; 0x19d8 <KEYPAD_getPressedKey+0x54>
    1a48:	c5 cf       	rjmp	.-118    	; 0x19d4 <KEYPAD_getPressedKey+0x50>

00001a4a <KEYPAD_4x4_adjustKeyNumber>:
#elif(KEYPAD_NUMBER_OF_COLS==4)
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 current_button=0;
    1a58:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number){
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3c 83       	std	Y+4, r19	; 0x04
    1a62:	2b 83       	std	Y+3, r18	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	88 30       	cpi	r24, 0x08	; 8
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a6e:	70 c0       	rjmp	.+224    	; 0x1b50 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	29 30       	cpi	r18, 0x09	; 9
    1a76:	31 05       	cpc	r19, r1
    1a78:	5c f5       	brge	.+86     	; 0x1ad0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	84 30       	cpi	r24, 0x04	; 4
    1a80:	91 05       	cpc	r25, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a84:	59 c0       	rjmp	.+178    	; 0x1b38 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	25 30       	cpi	r18, 0x05	; 5
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	9c f4       	brge	.+38     	; 0x1ab6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	91 05       	cpc	r25, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a9a:	48 c0       	rjmp	.+144    	; 0x1b2c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa0:	23 30       	cpi	r18, 0x03	; 3
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	0c f0       	brlt	.+2      	; 0x1aa8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1aa6:	45 c0       	rjmp	.+138    	; 0x1b32 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ab2:	39 c0       	rjmp	.+114    	; 0x1b26 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ab4:	66 c0       	rjmp	.+204    	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	26 30       	cpi	r18, 0x06	; 6
    1abc:	31 05       	cpc	r19, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ac0:	41 c0       	rjmp	.+130    	; 0x1b44 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	87 30       	cpi	r24, 0x07	; 7
    1ac8:	91 05       	cpc	r25, r1
    1aca:	0c f0       	brlt	.+2      	; 0x1ace <KEYPAD_4x4_adjustKeyNumber+0x84>
    1acc:	3e c0       	rjmp	.+124    	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ace:	37 c0       	rjmp	.+110    	; 0x1b3e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad4:	2c 30       	cpi	r18, 0x0C	; 12
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ada:	46 c0       	rjmp	.+140    	; 0x1b68 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	8d 30       	cpi	r24, 0x0D	; 13
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	5c f4       	brge	.+22     	; 0x1afc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	2a 30       	cpi	r18, 0x0A	; 10
    1aec:	31 05       	cpc	r19, r1
    1aee:	b1 f1       	breq	.+108    	; 0x1b5c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	8b 30       	cpi	r24, 0x0B	; 11
    1af6:	91 05       	cpc	r25, r1
    1af8:	a4 f5       	brge	.+104    	; 0x1b62 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1afa:	2d c0       	rjmp	.+90     	; 0x1b56 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1afc:	2b 81       	ldd	r18, Y+3	; 0x03
    1afe:	3c 81       	ldd	r19, Y+4	; 0x04
    1b00:	2e 30       	cpi	r18, 0x0E	; 14
    1b02:	31 05       	cpc	r19, r1
    1b04:	b9 f1       	breq	.+110    	; 0x1b74 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	8e 30       	cpi	r24, 0x0E	; 14
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	7c f1       	brlt	.+94     	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b10:	2b 81       	ldd	r18, Y+3	; 0x03
    1b12:	3c 81       	ldd	r19, Y+4	; 0x04
    1b14:	2f 30       	cpi	r18, 0x0F	; 15
    1b16:	31 05       	cpc	r19, r1
    1b18:	79 f1       	breq	.+94     	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	80 31       	cpi	r24, 0x10	; 16
    1b20:	91 05       	cpc	r25, r1
    1b22:	69 f1       	breq	.+90     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b24:	2e c0       	rjmp	.+92     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
	case 1:{
		current_button = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	2b c0       	rjmp	.+86     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 2:{
		current_button = 2;
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	28 c0       	rjmp	.+80     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 3:{
		current_button = 3;
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	25 c0       	rjmp	.+74     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 4:{
		current_button = '%'; /* ASCII of '%' */
    1b38:	85 e2       	ldi	r24, 0x25	; 37
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	22 c0       	rjmp	.+68     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 5:{
		current_button = 4;
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	1f c0       	rjmp	.+62     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 6:{
		current_button = 5;
    1b44:	85 e0       	ldi	r24, 0x05	; 5
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	1c c0       	rjmp	.+56     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 7:{
		current_button = 6;
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	19 c0       	rjmp	.+50     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 8:{
		current_button = '*';  /* ASCII of '*' */
    1b50:	8a e2       	ldi	r24, 0x2A	; 42
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	16 c0       	rjmp	.+44     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 9:{
		current_button = 7;
    1b56:	87 e0       	ldi	r24, 0x07	; 7
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 10:{
		current_button = 8;
    1b5c:	88 e0       	ldi	r24, 0x08	; 8
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	10 c0       	rjmp	.+32     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 11:{
		current_button = 9;
    1b62:	89 e0       	ldi	r24, 0x09	; 9
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	0d c0       	rjmp	.+26     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 12:{
		current_button = '-';  /* ASCII of '-' */
    1b68:	8d e2       	ldi	r24, 0x2D	; 45
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 13:{
		current_button = 0x0D; /*ASCII of Enter*/
    1b6e:	8d e0       	ldi	r24, 0x0D	; 13
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 14:{
		current_button = 0;
    1b74:	19 82       	std	Y+1, r1	; 0x01
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 15:{
		current_button = '='; /* ASCII of '=' */
    1b78:	8d e3       	ldi	r24, 0x3D	; 61
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	}
	case 16:{
		current_button = '+'; /* ASCII of '+' */
    1b7e:	8b e2       	ldi	r24, 0x2B	; 43
    1b80:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	}
	return current_button;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void){
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	67 e0       	ldi	r22, 0x07	; 7
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,PIN_OUTPUT);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	65 e0       	ldi	r22, 0x05	; 5
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1bc0:	b1 e4       	ldi	r27, 0x41	; 65
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a ef       	ldi	r20, 0xFA	; 250
    1bd8:	54 e4       	ldi	r21, 0x44	; 68
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_init+0x7a>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_init+0xda>
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_init+0xc8>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_init+0xbc>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_init+0x104>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT_MODE);

#elif(LCD_MODE==4)
	/* Configure the data pins as output pins */
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB7_ID,PIN_OUTPUT);
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	63 e0       	ldi	r22, 0x03	; 3
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB6_ID,PIN_OUTPUT);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	62 e0       	ldi	r22, 0x02	; 2
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB5_ID,PIN_OUTPUT);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB4_ID,PIN_OUTPUT);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1cc6:	83 e3       	ldi	r24, 0x33	; 51
    1cc8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2 );
    1ccc:	82 e3       	ldi	r24, 0x32	; 50
    1cce:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_MODE);
    1cd2:	88 e2       	ldi	r24, 0x28	; 40
    1cd4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
#endif

	 /* cursor off */
	LCD_sendCommand( LCD_CURSOR_OFF );
    1cd8:	8c e0       	ldi	r24, 0x0C	; 12
    1cda:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_DISPLAY );
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    1ce4:	2e 96       	adiw	r28, 0x0e	; 14
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(unsigned char command){
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	c3 56       	subi	r28, 0x63	; 99
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 59       	subi	r30, 0x9D	; 157
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 83       	st	Z, r24
	 /* Instruction Mode RS=0 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	67 e0       	ldi	r22, 0x07	; 7
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d22:	fe 01       	movw	r30, r28
    1d24:	e1 5a       	subi	r30, 0xA1	; 161
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	80 83       	st	Z, r24
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	a2 83       	std	Z+2, r26	; 0x02
    1d36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	8e 01       	movw	r16, r28
    1d3a:	05 5a       	subi	r16, 0xA5	; 165
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e1 5a       	subi	r30, 0xA1	; 161
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a ef       	ldi	r20, 0xFA	; 250
    1d52:	54 e4       	ldi	r21, 0x44	; 68
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	80 83       	st	Z, r24
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	a2 83       	std	Z+2, r26	; 0x02
    1d64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d66:	fe 01       	movw	r30, r28
    1d68:	e5 5a       	subi	r30, 0xA5	; 165
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	44 f4       	brge	.+16     	; 0x1d94 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d84:	fe 01       	movw	r30, r28
    1d86:	e7 5a       	subi	r30, 0xA7	; 167
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	64 c0       	rjmp	.+200    	; 0x1e5c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d94:	fe 01       	movw	r30, r28
    1d96:	e5 5a       	subi	r30, 0xA5	; 165
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <LCD_sendCommand+0xbe>
    1db2:	43 c0       	rjmp	.+134    	; 0x1e3a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	fe 01       	movw	r30, r28
    1db6:	e1 5a       	subi	r30, 0xA1	; 161
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	07 5a       	subi	r16, 0xA7	; 167
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	f8 01       	movw	r30, r16
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	1f c0       	rjmp	.+62     	; 0x1e2a <LCD_sendCommand+0x134>
    1dec:	fe 01       	movw	r30, r28
    1dee:	e9 5a       	subi	r30, 0xA9	; 169
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	88 ec       	ldi	r24, 0xC8	; 200
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e9 5a       	subi	r30, 0xA9	; 169
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_sendCommand+0x10e>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e9 5a       	subi	r30, 0xA9	; 169
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	de 01       	movw	r26, r28
    1e14:	a7 5a       	subi	r26, 0xA7	; 167
    1e16:	bf 4f       	sbci	r27, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e7 5a       	subi	r30, 0xA7	; 167
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	9c 93       	st	X, r25
    1e28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e7 5a       	subi	r30, 0xA7	; 167
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	d1 f6       	brne	.-76     	; 0x1dec <LCD_sendCommand+0xf6>
    1e38:	27 c0       	rjmp	.+78     	; 0x1e88 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	07 5a       	subi	r16, 0xA7	; 167
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	fe 01       	movw	r30, r28
    1e42:	e5 5a       	subi	r30, 0xA5	; 165
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	f8 01       	movw	r30, r16
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
    1e5c:	de 01       	movw	r26, r28
    1e5e:	ab 5a       	subi	r26, 0xAB	; 171
    1e60:	bf 4f       	sbci	r27, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e7 5a       	subi	r30, 0xA7	; 167
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	8d 93       	st	X+, r24
    1e6e:	9c 93       	st	X, r25
    1e70:	fe 01       	movw	r30, r28
    1e72:	eb 5a       	subi	r30, 0xAB	; 171
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_sendCommand+0x184>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	eb 5a       	subi	r30, 0xAB	; 171
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	65 e0       	ldi	r22, 0x05	; 5
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e92:	fe 01       	movw	r30, r28
    1e94:	ef 5a       	subi	r30, 0xAF	; 175
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e8       	ldi	r26, 0x80	; 128
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	80 83       	st	Z, r24
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	a2 83       	std	Z+2, r26	; 0x02
    1ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	03 5b       	subi	r16, 0xB3	; 179
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ef 5a       	subi	r30, 0xAF	; 175
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	f8 01       	movw	r30, r16
    1ece:	80 83       	st	Z, r24
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	a2 83       	std	Z+2, r26	; 0x02
    1ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e3 5b       	subi	r30, 0xB3	; 179
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	44 f4       	brge	.+16     	; 0x1f04 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e5 5b       	subi	r30, 0xB5	; 181
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	64 c0       	rjmp	.+200    	; 0x1fcc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f04:	fe 01       	movw	r30, r28
    1f06:	e3 5b       	subi	r30, 0xB3	; 179
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <LCD_sendCommand+0x22e>
    1f22:	43 c0       	rjmp	.+134    	; 0x1faa <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	fe 01       	movw	r30, r28
    1f26:	ef 5a       	subi	r30, 0xAF	; 175
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8e 01       	movw	r16, r28
    1f44:	05 5b       	subi	r16, 0xB5	; 181
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	1f c0       	rjmp	.+62     	; 0x1f9a <LCD_sendCommand+0x2a4>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e7 5b       	subi	r30, 0xB7	; 183
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	88 ec       	ldi	r24, 0xC8	; 200
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e7 5b       	subi	r30, 0xB7	; 183
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_sendCommand+0x27e>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e7 5b       	subi	r30, 0xB7	; 183
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	de 01       	movw	r26, r28
    1f84:	a5 5b       	subi	r26, 0xB5	; 181
    1f86:	bf 4f       	sbci	r27, 0xFF	; 255
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e5 5b       	subi	r30, 0xB5	; 181
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	11 96       	adiw	r26, 0x01	; 1
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e5 5b       	subi	r30, 0xB5	; 181
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	d1 f6       	brne	.-76     	; 0x1f5c <LCD_sendCommand+0x266>
    1fa8:	27 c0       	rjmp	.+78     	; 0x1ff8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	8e 01       	movw	r16, r28
    1fac:	05 5b       	subi	r16, 0xB5	; 181
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e3 5b       	subi	r30, 0xB3	; 179
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	de 01       	movw	r26, r28
    1fce:	a9 5b       	subi	r26, 0xB9	; 185
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e5 5b       	subi	r30, 0xB5	; 181
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	8d 93       	st	X+, r24
    1fde:	9c 93       	st	X, r25
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e9 5b       	subi	r30, 0xB9	; 185
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_sendCommand+0x2f4>
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e9 5b       	subi	r30, 0xB9	; 185
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW) /* Disable LCD E=0 */;
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_MODE==4)
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(command,4));
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ed 59       	subi	r30, 0x9D	; 157
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	82 95       	swap	r24
    2002:	8f 70       	andi	r24, 0x0F	; 15
    2004:	98 2f       	mov	r25, r24
    2006:	91 70       	andi	r25, 0x01	; 1
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	49 2f       	mov	r20, r25
    200e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(command,5));
    2012:	fe 01       	movw	r30, r28
    2014:	ed 59       	subi	r30, 0x9D	; 157
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	82 95       	swap	r24
    201c:	86 95       	lsr	r24
    201e:	87 70       	andi	r24, 0x07	; 7
    2020:	98 2f       	mov	r25, r24
    2022:	91 70       	andi	r25, 0x01	; 1
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	49 2f       	mov	r20, r25
    202a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(command,6));
    202e:	fe 01       	movw	r30, r28
    2030:	ed 59       	subi	r30, 0x9D	; 157
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	82 95       	swap	r24
    2038:	86 95       	lsr	r24
    203a:	86 95       	lsr	r24
    203c:	83 70       	andi	r24, 0x03	; 3
    203e:	98 2f       	mov	r25, r24
    2040:	91 70       	andi	r25, 0x01	; 1
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	62 e0       	ldi	r22, 0x02	; 2
    2046:	49 2f       	mov	r20, r25
    2048:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(command,7));
    204c:	fe 01       	movw	r30, r28
    204e:	ed 59       	subi	r30, 0x9D	; 157
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	98 2f       	mov	r25, r24
    2056:	99 1f       	adc	r25, r25
    2058:	99 27       	eor	r25, r25
    205a:	99 1f       	adc	r25, r25
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	63 e0       	ldi	r22, 0x03	; 3
    2060:	49 2f       	mov	r20, r25
    2062:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2066:	fe 01       	movw	r30, r28
    2068:	ed 5b       	subi	r30, 0xBD	; 189
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	80 83       	st	Z, r24
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	a2 83       	std	Z+2, r26	; 0x02
    207a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	8e 01       	movw	r16, r28
    207e:	01 5c       	subi	r16, 0xC1	; 193
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	ed 5b       	subi	r30, 0xBD	; 189
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	f8 01       	movw	r30, r16
    20a2:	80 83       	st	Z, r24
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	a2 83       	std	Z+2, r26	; 0x02
    20a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20aa:	fe 01       	movw	r30, r28
    20ac:	ff 96       	adiw	r30, 0x3f	; 63
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <LCD_sendCommand+0x3da>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9e af       	std	Y+62, r25	; 0x3e
    20cc:	8d af       	std	Y+61, r24	; 0x3d
    20ce:	46 c0       	rjmp	.+140    	; 0x215c <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    20d0:	fe 01       	movw	r30, r28
    20d2:	ff 96       	adiw	r30, 0x3f	; 63
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	64 f5       	brge	.+88     	; 0x2144 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	fe 01       	movw	r30, r28
    20ee:	ed 5b       	subi	r30, 0xBD	; 189
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e af       	std	Y+62, r25	; 0x3e
    2118:	8d af       	std	Y+61, r24	; 0x3d
    211a:	0f c0       	rjmp	.+30     	; 0x213a <LCD_sendCommand+0x444>
    211c:	88 ec       	ldi	r24, 0xC8	; 200
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c af       	std	Y+60, r25	; 0x3c
    2122:	8b af       	std	Y+59, r24	; 0x3b
    2124:	8b ad       	ldd	r24, Y+59	; 0x3b
    2126:	9c ad       	ldd	r25, Y+60	; 0x3c
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_sendCommand+0x432>
    212c:	9c af       	std	Y+60, r25	; 0x3c
    212e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8d ad       	ldd	r24, Y+61	; 0x3d
    2132:	9e ad       	ldd	r25, Y+62	; 0x3e
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9e af       	std	Y+62, r25	; 0x3e
    2138:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8d ad       	ldd	r24, Y+61	; 0x3d
    213c:	9e ad       	ldd	r25, Y+62	; 0x3e
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <LCD_sendCommand+0x426>
    2142:	16 c0       	rjmp	.+44     	; 0x2170 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	fe 01       	movw	r30, r28
    2146:	ff 96       	adiw	r30, 0x3f	; 63
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e af       	std	Y+62, r25	; 0x3e
    215a:	8d af       	std	Y+61, r24	; 0x3d
    215c:	8d ad       	ldd	r24, Y+61	; 0x3d
    215e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2160:	9a af       	std	Y+58, r25	; 0x3a
    2162:	89 af       	std	Y+57, r24	; 0x39
    2164:	89 ad       	ldd	r24, Y+57	; 0x39
    2166:	9a ad       	ldd	r25, Y+58	; 0x3a
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_sendCommand+0x472>
    216c:	9a af       	std	Y+58, r25	; 0x3a
    216e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW);
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	65 e0       	ldi	r22, 0x05	; 5
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	8d ab       	std	Y+53, r24	; 0x35
    2184:	9e ab       	std	Y+54, r25	; 0x36
    2186:	af ab       	std	Y+55, r26	; 0x37
    2188:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6d a9       	ldd	r22, Y+53	; 0x35
    218c:	7e a9       	ldd	r23, Y+54	; 0x36
    218e:	8f a9       	ldd	r24, Y+55	; 0x37
    2190:	98 ad       	ldd	r25, Y+56	; 0x38
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a ef       	ldi	r20, 0xFA	; 250
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	89 ab       	std	Y+49, r24	; 0x31
    21a4:	9a ab       	std	Y+50, r25	; 0x32
    21a6:	ab ab       	std	Y+51, r26	; 0x33
    21a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21aa:	69 a9       	ldd	r22, Y+49	; 0x31
    21ac:	7a a9       	ldd	r23, Y+50	; 0x32
    21ae:	8b a9       	ldd	r24, Y+51	; 0x33
    21b0:	9c a9       	ldd	r25, Y+52	; 0x34
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_sendCommand+0x4d6>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	98 ab       	std	Y+48, r25	; 0x30
    21c8:	8f a7       	std	Y+47, r24	; 0x2f
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6d a9       	ldd	r22, Y+53	; 0x35
    21e6:	7e a9       	ldd	r23, Y+54	; 0x36
    21e8:	8f a9       	ldd	r24, Y+55	; 0x37
    21ea:	98 ad       	ldd	r25, Y+56	; 0x38
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	98 ab       	std	Y+48, r25	; 0x30
    220a:	8f a7       	std	Y+47, r24	; 0x2f
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_sendCommand+0x536>
    220e:	88 ec       	ldi	r24, 0xC8	; 200
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9e a7       	std	Y+46, r25	; 0x2e
    2214:	8d a7       	std	Y+45, r24	; 0x2d
    2216:	8d a5       	ldd	r24, Y+45	; 0x2d
    2218:	9e a5       	ldd	r25, Y+46	; 0x2e
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x524>
    221e:	9e a7       	std	Y+46, r25	; 0x2e
    2220:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	8f a5       	ldd	r24, Y+47	; 0x2f
    2224:	98 a9       	ldd	r25, Y+48	; 0x30
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	98 ab       	std	Y+48, r25	; 0x30
    222a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	8f a5       	ldd	r24, Y+47	; 0x2f
    222e:	98 a9       	ldd	r25, Y+48	; 0x30
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_sendCommand+0x518>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	69 a9       	ldd	r22, Y+49	; 0x31
    2238:	7a a9       	ldd	r23, Y+50	; 0x32
    223a:	8b a9       	ldd	r24, Y+51	; 0x33
    223c:	9c a9       	ldd	r25, Y+52	; 0x34
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	98 ab       	std	Y+48, r25	; 0x30
    2248:	8f a7       	std	Y+47, r24	; 0x2f
    224a:	8f a5       	ldd	r24, Y+47	; 0x2f
    224c:	98 a9       	ldd	r25, Y+48	; 0x30
    224e:	9c a7       	std	Y+44, r25	; 0x2c
    2250:	8b a7       	std	Y+43, r24	; 0x2b
    2252:	8b a5       	ldd	r24, Y+43	; 0x2b
    2254:	9c a5       	ldd	r25, Y+44	; 0x2c
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x560>
    225a:	9c a7       	std	Y+44, r25	; 0x2c
    225c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	65 e0       	ldi	r22, 0x05	; 5
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e8       	ldi	r26, 0x80	; 128
    226e:	bf e3       	ldi	r27, 0x3F	; 63
    2270:	8f a3       	std	Y+39, r24	; 0x27
    2272:	98 a7       	std	Y+40, r25	; 0x28
    2274:	a9 a7       	std	Y+41, r26	; 0x29
    2276:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a ef       	ldi	r20, 0xFA	; 250
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8b a3       	std	Y+35, r24	; 0x23
    2292:	9c a3       	std	Y+36, r25	; 0x24
    2294:	ad a3       	std	Y+37, r26	; 0x25
    2296:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2298:	6b a1       	ldd	r22, Y+35	; 0x23
    229a:	7c a1       	ldd	r23, Y+36	; 0x24
    229c:	8d a1       	ldd	r24, Y+37	; 0x25
    229e:	9e a1       	ldd	r25, Y+38	; 0x26
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	2c f4       	brge	.+10     	; 0x22ba <LCD_sendCommand+0x5c4>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9a a3       	std	Y+34, r25	; 0x22
    22b6:	89 a3       	std	Y+33, r24	; 0x21
    22b8:	3f c0       	rjmp	.+126    	; 0x2338 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    22ba:	6b a1       	ldd	r22, Y+35	; 0x23
    22bc:	7c a1       	ldd	r23, Y+36	; 0x24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f5       	brge	.+82     	; 0x2324 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d2:	6f a1       	ldd	r22, Y+39	; 0x27
    22d4:	78 a5       	ldd	r23, Y+40	; 0x28
    22d6:	89 a5       	ldd	r24, Y+41	; 0x29
    22d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9a a3       	std	Y+34, r25	; 0x22
    22f8:	89 a3       	std	Y+33, r24	; 0x21
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <LCD_sendCommand+0x624>
    22fc:	88 ec       	ldi	r24, 0xC8	; 200
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	98 a3       	std	Y+32, r25	; 0x20
    2302:	8f 8f       	std	Y+31, r24	; 0x1f
    2304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2306:	98 a1       	ldd	r25, Y+32	; 0x20
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_sendCommand+0x612>
    230c:	98 a3       	std	Y+32, r25	; 0x20
    230e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2310:	89 a1       	ldd	r24, Y+33	; 0x21
    2312:	9a a1       	ldd	r25, Y+34	; 0x22
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	9a a3       	std	Y+34, r25	; 0x22
    2318:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231a:	89 a1       	ldd	r24, Y+33	; 0x21
    231c:	9a a1       	ldd	r25, Y+34	; 0x22
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	69 f7       	brne	.-38     	; 0x22fc <LCD_sendCommand+0x606>
    2322:	14 c0       	rjmp	.+40     	; 0x234c <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2324:	6b a1       	ldd	r22, Y+35	; 0x23
    2326:	7c a1       	ldd	r23, Y+36	; 0x24
    2328:	8d a1       	ldd	r24, Y+37	; 0x25
    232a:	9e a1       	ldd	r25, Y+38	; 0x26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9a a3       	std	Y+34, r25	; 0x22
    2336:	89 a3       	std	Y+33, r24	; 0x21
    2338:	89 a1       	ldd	r24, Y+33	; 0x21
    233a:	9a a1       	ldd	r25, Y+34	; 0x22
    233c:	9e 8f       	std	Y+30, r25	; 0x1e
    233e:	8d 8f       	std	Y+29, r24	; 0x1d
    2340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_sendCommand+0x64e>
    2348:	9e 8f       	std	Y+30, r25	; 0x1e
    234a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(command,0));
    234c:	fe 01       	movw	r30, r28
    234e:	ed 59       	subi	r30, 0x9D	; 157
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	98 2f       	mov	r25, r24
    2356:	91 70       	andi	r25, 0x01	; 1
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	49 2f       	mov	r20, r25
    235e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(command,1));
    2362:	fe 01       	movw	r30, r28
    2364:	ed 59       	subi	r30, 0x9D	; 157
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	86 95       	lsr	r24
    236c:	98 2f       	mov	r25, r24
    236e:	91 70       	andi	r25, 0x01	; 1
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	49 2f       	mov	r20, r25
    2376:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(command,2));
    237a:	fe 01       	movw	r30, r28
    237c:	ed 59       	subi	r30, 0x9D	; 157
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	86 95       	lsr	r24
    2384:	86 95       	lsr	r24
    2386:	98 2f       	mov	r25, r24
    2388:	91 70       	andi	r25, 0x01	; 1
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	49 2f       	mov	r20, r25
    2390:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(command,3));
    2394:	fe 01       	movw	r30, r28
    2396:	ed 59       	subi	r30, 0x9D	; 157
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	86 95       	lsr	r24
    239e:	86 95       	lsr	r24
    23a0:	86 95       	lsr	r24
    23a2:	98 2f       	mov	r25, r24
    23a4:	91 70       	andi	r25, 0x01	; 1
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	63 e0       	ldi	r22, 0x03	; 3
    23aa:	49 2f       	mov	r20, r25
    23ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	89 8f       	std	Y+25, r24	; 0x19
    23ba:	9a 8f       	std	Y+26, r25	; 0x1a
    23bc:	ab 8f       	std	Y+27, r26	; 0x1b
    23be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a ef       	ldi	r20, 0xFA	; 250
    23ce:	54 e4       	ldi	r21, 0x44	; 68
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8d 8b       	std	Y+21, r24	; 0x15
    23da:	9e 8b       	std	Y+22, r25	; 0x16
    23dc:	af 8b       	std	Y+23, r26	; 0x17
    23de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <LCD_sendCommand+0x70c>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	69 8d       	ldd	r22, Y+25	; 0x19
    241c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_sendCommand+0x76c>
    2444:	88 ec       	ldi	r24, 0xC8	; 200
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9a 8b       	std	Y+18, r25	; 0x12
    244a:	89 8b       	std	Y+17, r24	; 0x11
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	9a 89       	ldd	r25, Y+18	; 0x12
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x75a>
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <LCD_sendCommand+0x74e>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	98 8b       	std	Y+16, r25	; 0x10
    2486:	8f 87       	std	Y+15, r24	; 0x0f
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	98 89       	ldd	r25, Y+16	; 0x10
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_sendCommand+0x796>
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	65 e0       	ldi	r22, 0x05	; 5
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 e8       	ldi	r26, 0x80	; 128
    24a4:	bf e3       	ldi	r27, 0x3F	; 63
    24a6:	8b 87       	std	Y+11, r24	; 0x0b
    24a8:	9c 87       	std	Y+12, r25	; 0x0c
    24aa:	ad 87       	std	Y+13, r26	; 0x0d
    24ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a ef       	ldi	r20, 0xFA	; 250
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8f 83       	std	Y+7, r24	; 0x07
    24c8:	98 87       	std	Y+8, r25	; 0x08
    24ca:	a9 87       	std	Y+9, r26	; 0x09
    24cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6b 85       	ldd	r22, Y+11	; 0x0b
    250a:	7c 85       	ldd	r23, Y+12	; 0x0c
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_sendCommand+0x85a>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_sendCommand+0x848>
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_sendCommand+0x83c>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_sendCommand+0x884>
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif

}
    2582:	cd 59       	subi	r28, 0x9D	; 157
    2584:	df 4f       	sbci	r29, 0xFF	; 255
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <LCD_displayChar>:

void LCD_displayChar(unsigned char data){
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	c3 56       	subi	r28, 0x63	; 99
    25a8:	d0 40       	sbci	r29, 0x00	; 0
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	fe 01       	movw	r30, r28
    25b6:	ed 59       	subi	r30, 0x9D	; 157
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	67 e0       	ldi	r22, 0x07	; 7
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    25c6:	fe 01       	movw	r30, r28
    25c8:	e1 5a       	subi	r30, 0xA1	; 161
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e8       	ldi	r26, 0x80	; 128
    25d2:	bf e3       	ldi	r27, 0x3F	; 63
    25d4:	80 83       	st	Z, r24
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	a2 83       	std	Z+2, r26	; 0x02
    25da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	8e 01       	movw	r16, r28
    25de:	05 5a       	subi	r16, 0xA5	; 165
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	e1 5a       	subi	r30, 0xA1	; 161
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	f8 01       	movw	r30, r16
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    260a:	fe 01       	movw	r30, r28
    260c:	e5 5a       	subi	r30, 0xA5	; 165
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e8       	ldi	r20, 0x80	; 128
    261e:	5f e3       	ldi	r21, 0x3F	; 63
    2620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2624:	88 23       	and	r24, r24
    2626:	44 f4       	brge	.+16     	; 0x2638 <LCD_displayChar+0x9e>
		__ticks = 1;
    2628:	fe 01       	movw	r30, r28
    262a:	e7 5a       	subi	r30, 0xA7	; 167
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	64 c0       	rjmp	.+200    	; 0x2700 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    2638:	fe 01       	movw	r30, r28
    263a:	e5 5a       	subi	r30, 0xA5	; 165
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	0c f0       	brlt	.+2      	; 0x2658 <LCD_displayChar+0xbe>
    2656:	43 c0       	rjmp	.+134    	; 0x26de <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	fe 01       	movw	r30, r28
    265a:	e1 5a       	subi	r30, 0xA1	; 161
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8e 01       	movw	r16, r28
    2678:	07 5a       	subi	r16, 0xA7	; 167
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	f8 01       	movw	r30, r16
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	1f c0       	rjmp	.+62     	; 0x26ce <LCD_displayChar+0x134>
    2690:	fe 01       	movw	r30, r28
    2692:	e9 5a       	subi	r30, 0xA9	; 169
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	88 ec       	ldi	r24, 0xC8	; 200
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	fe 01       	movw	r30, r28
    26a0:	e9 5a       	subi	r30, 0xA9	; 169
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <LCD_displayChar+0x10e>
    26ac:	fe 01       	movw	r30, r28
    26ae:	e9 5a       	subi	r30, 0xA9	; 169
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	de 01       	movw	r26, r28
    26b8:	a7 5a       	subi	r26, 0xA7	; 167
    26ba:	bf 4f       	sbci	r27, 0xFF	; 255
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5a       	subi	r30, 0xA7	; 167
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	11 96       	adiw	r26, 0x01	; 1
    26ca:	9c 93       	st	X, r25
    26cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5a       	subi	r30, 0xA7	; 167
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	d1 f6       	brne	.-76     	; 0x2690 <LCD_displayChar+0xf6>
    26dc:	27 c0       	rjmp	.+78     	; 0x272c <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	8e 01       	movw	r16, r28
    26e0:	07 5a       	subi	r16, 0xA7	; 167
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	e5 5a       	subi	r30, 0xA5	; 165
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	de 01       	movw	r26, r28
    2702:	ab 5a       	subi	r26, 0xAB	; 171
    2704:	bf 4f       	sbci	r27, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	e7 5a       	subi	r30, 0xA7	; 167
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	8d 93       	st	X+, r24
    2712:	9c 93       	st	X, r25
    2714:	fe 01       	movw	r30, r28
    2716:	eb 5a       	subi	r30, 0xAB	; 171
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_displayChar+0x184>
    2722:	fe 01       	movw	r30, r28
    2724:	eb 5a       	subi	r30, 0xAB	; 171
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH);  /* Enable LCD E=1 */
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2736:	fe 01       	movw	r30, r28
    2738:	ef 5a       	subi	r30, 0xAF	; 175
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e8       	ldi	r26, 0x80	; 128
    2742:	bf e3       	ldi	r27, 0x3F	; 63
    2744:	80 83       	st	Z, r24
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	a2 83       	std	Z+2, r26	; 0x02
    274a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	8e 01       	movw	r16, r28
    274e:	03 5b       	subi	r16, 0xB3	; 179
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	ef 5a       	subi	r30, 0xAF	; 175
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	80 83       	st	Z, r24
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	a2 83       	std	Z+2, r26	; 0x02
    2778:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277a:	fe 01       	movw	r30, r28
    277c:	e3 5b       	subi	r30, 0xB3	; 179
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	44 f4       	brge	.+16     	; 0x27a8 <LCD_displayChar+0x20e>
		__ticks = 1;
    2798:	fe 01       	movw	r30, r28
    279a:	e5 5b       	subi	r30, 0xB5	; 181
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    27a6:	64 c0       	rjmp	.+200    	; 0x2870 <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    27a8:	fe 01       	movw	r30, r28
    27aa:	e3 5b       	subi	r30, 0xB3	; 179
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <LCD_displayChar+0x22e>
    27c6:	43 c0       	rjmp	.+134    	; 0x284e <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c8:	fe 01       	movw	r30, r28
    27ca:	ef 5a       	subi	r30, 0xAF	; 175
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8e 01       	movw	r16, r28
    27e8:	05 5b       	subi	r16, 0xB5	; 181
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	1f c0       	rjmp	.+62     	; 0x283e <LCD_displayChar+0x2a4>
    2800:	fe 01       	movw	r30, r28
    2802:	e7 5b       	subi	r30, 0xB7	; 183
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	88 ec       	ldi	r24, 0xC8	; 200
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	fe 01       	movw	r30, r28
    2810:	e7 5b       	subi	r30, 0xB7	; 183
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_displayChar+0x27e>
    281c:	fe 01       	movw	r30, r28
    281e:	e7 5b       	subi	r30, 0xB7	; 183
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	de 01       	movw	r26, r28
    2828:	a5 5b       	subi	r26, 0xB5	; 181
    282a:	bf 4f       	sbci	r27, 0xFF	; 255
    282c:	fe 01       	movw	r30, r28
    282e:	e5 5b       	subi	r30, 0xB5	; 181
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	11 96       	adiw	r26, 0x01	; 1
    283a:	9c 93       	st	X, r25
    283c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	fe 01       	movw	r30, r28
    2840:	e5 5b       	subi	r30, 0xB5	; 181
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	d1 f6       	brne	.-76     	; 0x2800 <LCD_displayChar+0x266>
    284c:	27 c0       	rjmp	.+78     	; 0x289c <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	8e 01       	movw	r16, r28
    2850:	05 5b       	subi	r16, 0xB5	; 181
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	e3 5b       	subi	r30, 0xB3	; 179
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	f8 01       	movw	r30, r16
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
    2870:	de 01       	movw	r26, r28
    2872:	a9 5b       	subi	r26, 0xB9	; 185
    2874:	bf 4f       	sbci	r27, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e5 5b       	subi	r30, 0xB5	; 181
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	8d 93       	st	X+, r24
    2882:	9c 93       	st	X, r25
    2884:	fe 01       	movw	r30, r28
    2886:	e9 5b       	subi	r30, 0xB9	; 185
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_displayChar+0x2f4>
    2892:	fe 01       	movw	r30, r28
    2894:	e9 5b       	subi	r30, 0xB9	; 185
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_MODE==4)
	/* out the required data to the data bus D4 --> D7 */
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(data,4));
    289c:	fe 01       	movw	r30, r28
    289e:	ed 59       	subi	r30, 0x9D	; 157
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	82 95       	swap	r24
    28a6:	8f 70       	andi	r24, 0x0F	; 15
    28a8:	98 2f       	mov	r25, r24
    28aa:	91 70       	andi	r25, 0x01	; 1
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	49 2f       	mov	r20, r25
    28b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(data,5));
    28b6:	fe 01       	movw	r30, r28
    28b8:	ed 59       	subi	r30, 0x9D	; 157
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	82 95       	swap	r24
    28c0:	86 95       	lsr	r24
    28c2:	87 70       	andi	r24, 0x07	; 7
    28c4:	98 2f       	mov	r25, r24
    28c6:	91 70       	andi	r25, 0x01	; 1
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	49 2f       	mov	r20, r25
    28ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(data,6));
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 59       	subi	r30, 0x9D	; 157
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	82 95       	swap	r24
    28dc:	86 95       	lsr	r24
    28de:	86 95       	lsr	r24
    28e0:	83 70       	andi	r24, 0x03	; 3
    28e2:	98 2f       	mov	r25, r24
    28e4:	91 70       	andi	r25, 0x01	; 1
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	62 e0       	ldi	r22, 0x02	; 2
    28ea:	49 2f       	mov	r20, r25
    28ec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(data,7));
    28f0:	fe 01       	movw	r30, r28
    28f2:	ed 59       	subi	r30, 0x9D	; 157
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	98 2f       	mov	r25, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	99 27       	eor	r25, r25
    28fe:	99 1f       	adc	r25, r25
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	63 e0       	ldi	r22, 0x03	; 3
    2904:	49 2f       	mov	r20, r25
    2906:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    290a:	fe 01       	movw	r30, r28
    290c:	ed 5b       	subi	r30, 0xBD	; 189
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e8       	ldi	r26, 0x80	; 128
    2916:	bf e3       	ldi	r27, 0x3F	; 63
    2918:	80 83       	st	Z, r24
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	a2 83       	std	Z+2, r26	; 0x02
    291e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2920:	8e 01       	movw	r16, r28
    2922:	01 5c       	subi	r16, 0xC1	; 193
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	fe 01       	movw	r30, r28
    2928:	ed 5b       	subi	r30, 0xBD	; 189
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	60 81       	ld	r22, Z
    292e:	71 81       	ldd	r23, Z+1	; 0x01
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	4a ef       	ldi	r20, 0xFA	; 250
    293a:	54 e4       	ldi	r21, 0x44	; 68
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	80 83       	st	Z, r24
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	a2 83       	std	Z+2, r26	; 0x02
    294c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    294e:	fe 01       	movw	r30, r28
    2950:	ff 96       	adiw	r30, 0x3f	; 63
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <LCD_displayChar+0x3da>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9e af       	std	Y+62, r25	; 0x3e
    2970:	8d af       	std	Y+61, r24	; 0x3d
    2972:	46 c0       	rjmp	.+140    	; 0x2a00 <LCD_displayChar+0x466>
	else if (__tmp > 65535)
    2974:	fe 01       	movw	r30, r28
    2976:	ff 96       	adiw	r30, 0x3f	; 63
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	3f ef       	ldi	r19, 0xFF	; 255
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	57 e4       	ldi	r21, 0x47	; 71
    2988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	64 f5       	brge	.+88     	; 0x29e8 <LCD_displayChar+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2990:	fe 01       	movw	r30, r28
    2992:	ed 5b       	subi	r30, 0xBD	; 189
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9e af       	std	Y+62, r25	; 0x3e
    29bc:	8d af       	std	Y+61, r24	; 0x3d
    29be:	0f c0       	rjmp	.+30     	; 0x29de <LCD_displayChar+0x444>
    29c0:	88 ec       	ldi	r24, 0xC8	; 200
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9c af       	std	Y+60, r25	; 0x3c
    29c6:	8b af       	std	Y+59, r24	; 0x3b
    29c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    29ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <LCD_displayChar+0x432>
    29d0:	9c af       	std	Y+60, r25	; 0x3c
    29d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9e af       	std	Y+62, r25	; 0x3e
    29dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <LCD_displayChar+0x426>
    29e6:	16 c0       	rjmp	.+44     	; 0x2a14 <LCD_displayChar+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	fe 01       	movw	r30, r28
    29ea:	ff 96       	adiw	r30, 0x3f	; 63
    29ec:	60 81       	ld	r22, Z
    29ee:	71 81       	ldd	r23, Z+1	; 0x01
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9e af       	std	Y+62, r25	; 0x3e
    29fe:	8d af       	std	Y+61, r24	; 0x3d
    2a00:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a02:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a04:	9a af       	std	Y+58, r25	; 0x3a
    2a06:	89 af       	std	Y+57, r24	; 0x39
    2a08:	89 ad       	ldd	r24, Y+57	; 0x39
    2a0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_displayChar+0x472>
    2a10:	9a af       	std	Y+58, r25	; 0x3a
    2a12:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW);/* Disable LCD E=0 */
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	65 e0       	ldi	r22, 0x05	; 5
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	a0 e8       	ldi	r26, 0x80	; 128
    2a24:	bf e3       	ldi	r27, 0x3F	; 63
    2a26:	8d ab       	std	Y+53, r24	; 0x35
    2a28:	9e ab       	std	Y+54, r25	; 0x36
    2a2a:	af ab       	std	Y+55, r26	; 0x37
    2a2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a30:	7e a9       	ldd	r23, Y+54	; 0x36
    2a32:	8f a9       	ldd	r24, Y+55	; 0x37
    2a34:	98 ad       	ldd	r25, Y+56	; 0x38
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	4a ef       	ldi	r20, 0xFA	; 250
    2a3c:	54 e4       	ldi	r21, 0x44	; 68
    2a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	89 ab       	std	Y+49, r24	; 0x31
    2a48:	9a ab       	std	Y+50, r25	; 0x32
    2a4a:	ab ab       	std	Y+51, r26	; 0x33
    2a4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a50:	7a a9       	ldd	r23, Y+50	; 0x32
    2a52:	8b a9       	ldd	r24, Y+51	; 0x33
    2a54:	9c a9       	ldd	r25, Y+52	; 0x34
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	5f e3       	ldi	r21, 0x3F	; 63
    2a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a62:	88 23       	and	r24, r24
    2a64:	2c f4       	brge	.+10     	; 0x2a70 <LCD_displayChar+0x4d6>
		__ticks = 1;
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	98 ab       	std	Y+48, r25	; 0x30
    2a6c:	8f a7       	std	Y+47, r24	; 0x2f
    2a6e:	3f c0       	rjmp	.+126    	; 0x2aee <LCD_displayChar+0x554>
	else if (__tmp > 65535)
    2a70:	69 a9       	ldd	r22, Y+49	; 0x31
    2a72:	7a a9       	ldd	r23, Y+50	; 0x32
    2a74:	8b a9       	ldd	r24, Y+51	; 0x33
    2a76:	9c a9       	ldd	r25, Y+52	; 0x34
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	3f ef       	ldi	r19, 0xFF	; 255
    2a7c:	4f e7       	ldi	r20, 0x7F	; 127
    2a7e:	57 e4       	ldi	r21, 0x47	; 71
    2a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a84:	18 16       	cp	r1, r24
    2a86:	4c f5       	brge	.+82     	; 0x2ada <LCD_displayChar+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a88:	6d a9       	ldd	r22, Y+53	; 0x35
    2a8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e2       	ldi	r20, 0x20	; 32
    2a96:	51 e4       	ldi	r21, 0x41	; 65
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	98 ab       	std	Y+48, r25	; 0x30
    2aae:	8f a7       	std	Y+47, r24	; 0x2f
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <LCD_displayChar+0x536>
    2ab2:	88 ec       	ldi	r24, 0xC8	; 200
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9e a7       	std	Y+46, r25	; 0x2e
    2ab8:	8d a7       	std	Y+45, r24	; 0x2d
    2aba:	8d a5       	ldd	r24, Y+45	; 0x2d
    2abc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <LCD_displayChar+0x524>
    2ac2:	9e a7       	std	Y+46, r25	; 0x2e
    2ac4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	98 ab       	std	Y+48, r25	; 0x30
    2ace:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	69 f7       	brne	.-38     	; 0x2ab2 <LCD_displayChar+0x518>
    2ad8:	14 c0       	rjmp	.+40     	; 0x2b02 <LCD_displayChar+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ada:	69 a9       	ldd	r22, Y+49	; 0x31
    2adc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ade:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	98 ab       	std	Y+48, r25	; 0x30
    2aec:	8f a7       	std	Y+47, r24	; 0x2f
    2aee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af0:	98 a9       	ldd	r25, Y+48	; 0x30
    2af2:	9c a7       	std	Y+44, r25	; 0x2c
    2af4:	8b a7       	std	Y+43, r24	; 0x2b
    2af6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <LCD_displayChar+0x560>
    2afe:	9c a7       	std	Y+44, r25	; 0x2c
    2b00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/* delay for processing Th = 13ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH);
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	65 e0       	ldi	r22, 0x05	; 5
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e8       	ldi	r26, 0x80	; 128
    2b12:	bf e3       	ldi	r27, 0x3F	; 63
    2b14:	8f a3       	std	Y+39, r24	; 0x27
    2b16:	98 a7       	std	Y+40, r25	; 0x28
    2b18:	a9 a7       	std	Y+41, r26	; 0x29
    2b1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b20:	89 a5       	ldd	r24, Y+41	; 0x29
    2b22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a ef       	ldi	r20, 0xFA	; 250
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8b a3       	std	Y+35, r24	; 0x23
    2b36:	9c a3       	std	Y+36, r25	; 0x24
    2b38:	ad a3       	std	Y+37, r26	; 0x25
    2b3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b40:	8d a1       	ldd	r24, Y+37	; 0x25
    2b42:	9e a1       	ldd	r25, Y+38	; 0x26
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <LCD_displayChar+0x5c4>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9a a3       	std	Y+34, r25	; 0x22
    2b5a:	89 a3       	std	Y+33, r24	; 0x21
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <LCD_displayChar+0x642>
	else if (__tmp > 65535)
    2b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b60:	7c a1       	ldd	r23, Y+36	; 0x24
    2b62:	8d a1       	ldd	r24, Y+37	; 0x25
    2b64:	9e a1       	ldd	r25, Y+38	; 0x26
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <LCD_displayChar+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	6f a1       	ldd	r22, Y+39	; 0x27
    2b78:	78 a5       	ldd	r23, Y+40	; 0x28
    2b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	89 a3       	std	Y+33, r24	; 0x21
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <LCD_displayChar+0x624>
    2ba0:	88 ec       	ldi	r24, 0xC8	; 200
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	98 a3       	std	Y+32, r25	; 0x20
    2ba6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ba8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2baa:	98 a1       	ldd	r25, Y+32	; 0x20
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <LCD_displayChar+0x612>
    2bb0:	98 a3       	std	Y+32, r25	; 0x20
    2bb2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9a a3       	std	Y+34, r25	; 0x22
    2bbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <LCD_displayChar+0x606>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <LCD_displayChar+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bca:	7c a1       	ldd	r23, Y+36	; 0x24
    2bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bce:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9a a3       	std	Y+34, r25	; 0x22
    2bda:	89 a3       	std	Y+33, r24	; 0x21
    2bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bde:	9a a1       	ldd	r25, Y+34	; 0x22
    2be0:	9e 8f       	std	Y+30, r25	; 0x1e
    2be2:	8d 8f       	std	Y+29, r24	; 0x1d
    2be4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_displayChar+0x64e>
    2bec:	9e 8f       	std	Y+30, r25	; 0x1e
    2bee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* out the rest of the required data to the data bus D4 --> D7 */
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(data,0));
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	ed 59       	subi	r30, 0x9D	; 157
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 81       	ld	r24, Z
    2bf8:	98 2f       	mov	r25, r24
    2bfa:	91 70       	andi	r25, 0x01	; 1
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	49 2f       	mov	r20, r25
    2c02:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(data,1));
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 59       	subi	r30, 0x9D	; 157
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	86 95       	lsr	r24
    2c10:	98 2f       	mov	r25, r24
    2c12:	91 70       	andi	r25, 0x01	; 1
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	49 2f       	mov	r20, r25
    2c1a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(data,2));
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ed 59       	subi	r30, 0x9D	; 157
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	86 95       	lsr	r24
    2c28:	86 95       	lsr	r24
    2c2a:	98 2f       	mov	r25, r24
    2c2c:	91 70       	andi	r25, 0x01	; 1
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	62 e0       	ldi	r22, 0x02	; 2
    2c32:	49 2f       	mov	r20, r25
    2c34:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(data,3));
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ed 59       	subi	r30, 0x9D	; 157
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	86 95       	lsr	r24
    2c42:	86 95       	lsr	r24
    2c44:	86 95       	lsr	r24
    2c46:	98 2f       	mov	r25, r24
    2c48:	91 70       	andi	r25, 0x01	; 1
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	63 e0       	ldi	r22, 0x03	; 3
    2c4e:	49 2f       	mov	r20, r25
    2c50:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 e8       	ldi	r26, 0x80	; 128
    2c5a:	bf e3       	ldi	r27, 0x3F	; 63
    2c5c:	89 8f       	std	Y+25, r24	; 0x19
    2c5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c60:	ab 8f       	std	Y+27, r26	; 0x1b
    2c62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c64:	69 8d       	ldd	r22, Y+25	; 0x19
    2c66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a ef       	ldi	r20, 0xFA	; 250
    2c72:	54 e4       	ldi	r21, 0x44	; 68
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8d 8b       	std	Y+21, r24	; 0x15
    2c7e:	9e 8b       	std	Y+22, r25	; 0x16
    2c80:	af 8b       	std	Y+23, r26	; 0x17
    2c82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c84:	6d 89       	ldd	r22, Y+21	; 0x15
    2c86:	7e 89       	ldd	r23, Y+22	; 0x16
    2c88:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <LCD_displayChar+0x70c>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9c 8b       	std	Y+20, r25	; 0x14
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <LCD_displayChar+0x78a>
	else if (__tmp > 65535)
    2ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    2caa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cac:	98 8d       	ldd	r25, Y+24	; 0x18
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	3f ef       	ldi	r19, 0xFF	; 255
    2cb2:	4f e7       	ldi	r20, 0x7F	; 127
    2cb4:	57 e4       	ldi	r21, 0x47	; 71
    2cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	4c f5       	brge	.+82     	; 0x2d10 <LCD_displayChar+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <LCD_displayChar+0x76c>
    2ce8:	88 ec       	ldi	r24, 0xC8	; 200
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9a 8b       	std	Y+18, r25	; 0x12
    2cee:	89 8b       	std	Y+17, r24	; 0x11
    2cf0:	89 89       	ldd	r24, Y+17	; 0x11
    2cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <LCD_displayChar+0x75a>
    2cf8:	9a 8b       	std	Y+18, r25	; 0x12
    2cfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	9c 8b       	std	Y+20, r25	; 0x14
    2d04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	69 f7       	brne	.-38     	; 0x2ce8 <LCD_displayChar+0x74e>
    2d0e:	14 c0       	rjmp	.+40     	; 0x2d38 <LCD_displayChar+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	6d 89       	ldd	r22, Y+21	; 0x15
    2d12:	7e 89       	ldd	r23, Y+22	; 0x16
    2d14:	8f 89       	ldd	r24, Y+23	; 0x17
    2d16:	98 8d       	ldd	r25, Y+24	; 0x18
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9c 8b       	std	Y+20, r25	; 0x14
    2d22:	8b 8b       	std	Y+19, r24	; 0x13
    2d24:	8b 89       	ldd	r24, Y+19	; 0x13
    2d26:	9c 89       	ldd	r25, Y+20	; 0x14
    2d28:	98 8b       	std	Y+16, r25	; 0x10
    2d2a:	8f 87       	std	Y+15, r24	; 0x0f
    2d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2e:	98 89       	ldd	r25, Y+16	; 0x10
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <LCD_displayChar+0x796>
    2d34:	98 8b       	std	Y+16, r25	; 0x10
    2d36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	65 e0       	ldi	r22, 0x05	; 5
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	a0 e8       	ldi	r26, 0x80	; 128
    2d48:	bf e3       	ldi	r27, 0x3F	; 63
    2d4a:	8b 87       	std	Y+11, r24	; 0x0b
    2d4c:	9c 87       	std	Y+12, r25	; 0x0c
    2d4e:	ad 87       	std	Y+13, r26	; 0x0d
    2d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	4a ef       	ldi	r20, 0xFA	; 250
    2d60:	54 e4       	ldi	r21, 0x44	; 68
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	8f 83       	std	Y+7, r24	; 0x07
    2d6c:	98 87       	std	Y+8, r25	; 0x08
    2d6e:	a9 87       	std	Y+9, r26	; 0x09
    2d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d72:	6f 81       	ldd	r22, Y+7	; 0x07
    2d74:	78 85       	ldd	r23, Y+8	; 0x08
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e8       	ldi	r20, 0x80	; 128
    2d80:	5f e3       	ldi	r21, 0x3F	; 63
    2d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d86:	88 23       	and	r24, r24
    2d88:	2c f4       	brge	.+10     	; 0x2d94 <LCD_displayChar+0x7fa>
		__ticks = 1;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	9e 83       	std	Y+6, r25	; 0x06
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	3f c0       	rjmp	.+126    	; 0x2e12 <LCD_displayChar+0x878>
	else if (__tmp > 65535)
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    2da0:	4f e7       	ldi	r20, 0x7F	; 127
    2da2:	57 e4       	ldi	r21, 0x47	; 71
    2da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2da8:	18 16       	cp	r1, r24
    2daa:	4c f5       	brge	.+82     	; 0x2dfe <LCD_displayChar+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e2       	ldi	r20, 0x20	; 32
    2dba:	51 e4       	ldi	r21, 0x41	; 65
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	bc 01       	movw	r22, r24
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	0f c0       	rjmp	.+30     	; 0x2df4 <LCD_displayChar+0x85a>
    2dd6:	88 ec       	ldi	r24, 0xC8	; 200
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <LCD_displayChar+0x848>
    2de6:	9c 83       	std	Y+4, r25	; 0x04
    2de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	69 f7       	brne	.-38     	; 0x2dd6 <LCD_displayChar+0x83c>
    2dfc:	14 c0       	rjmp	.+40     	; 0x2e26 <LCD_displayChar+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2e00:	78 85       	ldd	r23, Y+8	; 0x08
    2e02:	89 85       	ldd	r24, Y+9	; 0x09
    2e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <LCD_displayChar+0x884>
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif

}
    2e26:	cd 59       	subi	r28, 0x9D	; 157
    2e28:	df 4f       	sbci	r29, 0xFF	; 255
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	08 95       	ret

00002e3e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(unsigned char * LCD_data_ptr){
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <LCD_displayString+0x6>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	0a c0       	rjmp	.+20     	; 0x2e62 <LCD_displayString+0x24>
	while(*LCD_data_ptr!='\0'){
		LCD_displayChar(*LCD_data_ptr);
    2e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e50:	fa 81       	ldd	r31, Y+2	; 0x02
    2e52:	80 81       	ld	r24, Z
    2e54:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_displayChar>
		LCD_data_ptr++;
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	9a 83       	std	Y+2, r25	; 0x02
    2e60:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(unsigned char * LCD_data_ptr){
	while(*LCD_data_ptr!='\0'){
    2e62:	e9 81       	ldd	r30, Y+1	; 0x01
    2e64:	fa 81       	ldd	r31, Y+2	; 0x02
    2e66:	80 81       	ld	r24, Z
    2e68:	88 23       	and	r24, r24
    2e6a:	89 f7       	brne	.-30     	; 0x2e4e <LCD_displayString+0x10>
		LCD_displayChar(*LCD_data_ptr);
		LCD_data_ptr++;
	}
}
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(unsigned char row,unsigned char column){
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <LCD_moveCursor+0x6>
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <LCD_moveCursor+0x8>
    2e7e:	0f 92       	push	r0
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	8a 83       	std	Y+2, r24	; 0x02
    2e86:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char LCD_address=0;
    2e88:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the required address in the LCD DDRAM */
	switch(row){
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	3d 83       	std	Y+5, r19	; 0x05
    2e92:	2c 83       	std	Y+4, r18	; 0x04
    2e94:	8c 81       	ldd	r24, Y+4	; 0x04
    2e96:	9d 81       	ldd	r25, Y+5	; 0x05
    2e98:	81 30       	cpi	r24, 0x01	; 1
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	c1 f0       	breq	.+48     	; 0x2ece <LCD_moveCursor+0x58>
    2e9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea2:	22 30       	cpi	r18, 0x02	; 2
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <LCD_moveCursor+0x3c>
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	61 f0       	breq	.+24     	; 0x2ec8 <LCD_moveCursor+0x52>
    2eb0:	19 c0       	rjmp	.+50     	; 0x2ee4 <LCD_moveCursor+0x6e>
    2eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb6:	22 30       	cpi	r18, 0x02	; 2
    2eb8:	31 05       	cpc	r19, r1
    2eba:	69 f0       	breq	.+26     	; 0x2ed6 <LCD_moveCursor+0x60>
    2ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec0:	83 30       	cpi	r24, 0x03	; 3
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <LCD_moveCursor+0x68>
    2ec6:	0e c0       	rjmp	.+28     	; 0x2ee4 <LCD_moveCursor+0x6e>
	case 0 :
	{
		LCD_address=column;
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	0b c0       	rjmp	.+22     	; 0x2ee4 <LCD_moveCursor+0x6e>
		break;
	}
	case 1 :
	{
		LCD_address=0x40+column;
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	80 5c       	subi	r24, 0xC0	; 192
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <LCD_moveCursor+0x6e>
		break;
	}
	case 2:
	{
		LCD_address=0x10+column;
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	80 5f       	subi	r24, 0xF0	; 240
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	03 c0       	rjmp	.+6      	; 0x2ee4 <LCD_moveCursor+0x6e>
		break;
	}
	case 3:
	{
		LCD_address=0x50+column;
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	80 5b       	subi	r24, 0xB0	; 176
    2ee2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_CURSOR_POSITION|LCD_address);
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	80 68       	ori	r24, 0x80	; 128
    2ee8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(unsigned char row,unsigned char column,const char*Str){
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <LCD_displayStringRowColumn+0x6>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <LCD_displayStringRowColumn+0x8>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	6a 83       	std	Y+2, r22	; 0x02
    2f0c:	5c 83       	std	Y+4, r21	; 0x04
    2f0e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column); /* go to to the required LCD position */
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	6a 81       	ldd	r22, Y+2	; 0x02
    2f14:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
}
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	62 97       	sbiw	r28, 0x12	; 18
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	9a 8b       	std	Y+18, r25	; 0x12
    2f58:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f5a:	89 89       	ldd	r24, Y+17	; 0x11
    2f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f5e:	9e 01       	movw	r18, r28
    2f60:	2f 5f       	subi	r18, 0xFF	; 255
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	b9 01       	movw	r22, r18
    2f66:	4a e0       	ldi	r20, 0x0A	; 10
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	0e 94 a5 1a 	call	0x354a	; 0x354a <itoa>
	LCD_displayString(buff); /* Display the string */
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_displayString>
}
    2f76:	62 96       	adiw	r28, 0x12	; 18
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    2f88:	1f 92       	push	r1
    2f8a:	0f 92       	push	r0
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	0f 92       	push	r0
    2f90:	11 24       	eor	r1, r1
    2f92:	2f 93       	push	r18
    2f94:	3f 93       	push	r19
    2f96:	4f 93       	push	r20
    2f98:	5f 93       	push	r21
    2f9a:	6f 93       	push	r22
    2f9c:	7f 93       	push	r23
    2f9e:	8f 93       	push	r24
    2fa0:	9f 93       	push	r25
    2fa2:	af 93       	push	r26
    2fa4:	bf 93       	push	r27
    2fa6:	ef 93       	push	r30
    2fa8:	ff 93       	push	r31
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2fb2:	80 91 49 01 	lds	r24, 0x0149
    2fb6:	90 91 4a 01 	lds	r25, 0x014A
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	29 f0       	breq	.+10     	; 0x2fc8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application  */
		g_callBackPtr();
    2fbe:	e0 91 49 01 	lds	r30, 0x0149
    2fc2:	f0 91 4a 01 	lds	r31, 0x014A
    2fc6:	09 95       	icall
	}
}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3018:	80 91 49 01 	lds	r24, 0x0149
    301c:	90 91 4a 01 	lds	r25, 0x014A
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	29 f0       	breq	.+10     	; 0x302e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application  */
		g_callBackPtr();
    3024:	e0 91 49 01 	lds	r30, 0x0149
    3028:	f0 91 4a 01 	lds	r31, 0x014A
    302c:	09 95       	icall
	}
}
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	ff 91       	pop	r31
    3034:	ef 91       	pop	r30
    3036:	bf 91       	pop	r27
    3038:	af 91       	pop	r26
    303a:	9f 91       	pop	r25
    303c:	8f 91       	pop	r24
    303e:	7f 91       	pop	r23
    3040:	6f 91       	pop	r22
    3042:	5f 91       	pop	r21
    3044:	4f 91       	pop	r20
    3046:	3f 91       	pop	r19
    3048:	2f 91       	pop	r18
    304a:	0f 90       	pop	r0
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	0f 90       	pop	r0
    3050:	1f 90       	pop	r1
    3052:	18 95       	reti

00003054 <Timer1_init>:

/*
 * Description : Function to initialize the Timer1 driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	00 d0       	rcall	.+0      	; 0x305a <Timer1_init+0x6>
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
	sei();
    3062:	78 94       	sei
	/* Timer1 operates in non PWM Mode */
	TCCR1A|=(1<<FOC1A)|(1<<FOC1B);
    3064:	af e4       	ldi	r26, 0x4F	; 79
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	ef e4       	ldi	r30, 0x4F	; 79
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	8c 60       	ori	r24, 0x0C	; 12
    3070:	8c 93       	st	X, r24
	/* Set to required mode in the configurations*/
	TCCR1B = (TCCR1B&0xF7)|(Config_Ptr->mode <<3);
    3072:	ae e4       	ldi	r26, 0x4E	; 78
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	ee e4       	ldi	r30, 0x4E	; 78
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	28 2f       	mov	r18, r24
    307e:	27 7f       	andi	r18, 0xF7	; 247
    3080:	e9 81       	ldd	r30, Y+1	; 0x01
    3082:	fa 81       	ldd	r31, Y+2	; 0x02
    3084:	85 81       	ldd	r24, Z+5	; 0x05
    3086:	88 2f       	mov	r24, r24
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	82 2b       	or	r24, r18
    3098:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B&0xF8)|(Config_Ptr->prescaler & 0x07);
    309a:	ae e4       	ldi	r26, 0x4E	; 78
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	ee e4       	ldi	r30, 0x4E	; 78
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	98 2f       	mov	r25, r24
    30a6:	98 7f       	andi	r25, 0xF8	; 248
    30a8:	e9 81       	ldd	r30, Y+1	; 0x01
    30aa:	fa 81       	ldd	r31, Y+2	; 0x02
    30ac:	84 81       	ldd	r24, Z+4	; 0x04
    30ae:	87 70       	andi	r24, 0x07	; 7
    30b0:	89 2b       	or	r24, r25
    30b2:	8c 93       	st	X, r24
	/* Initial Value for Timer1 */
	TCNT1=Config_Ptr->initial_value;
    30b4:	ac e4       	ldi	r26, 0x4C	; 76
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ba:	fa 81       	ldd	r31, Y+2	; 0x02
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	9c 93       	st	X, r25
    30c4:	8e 93       	st	-X, r24
	if((Config_Ptr->mode)==Overflow_Mode)
    30c6:	e9 81       	ldd	r30, Y+1	; 0x01
    30c8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ca:	85 81       	ldd	r24, Z+5	; 0x05
    30cc:	88 23       	and	r24, r24
    30ce:	41 f4       	brne	.+16     	; 0x30e0 <Timer1_init+0x8c>
		 * 3. Normal Mode COM1A0=0 & COM1A1=0
		 * 4. Normal Mode COM1B0=0 & COM1B1=0
		 */

		/*Timer1 Overflow Interrupt Enable*/
		TIMSK|=(1<<TOIE1);
    30d0:	a9 e5       	ldi	r26, 0x59	; 89
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e9 e5       	ldi	r30, 0x59	; 89
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	84 60       	ori	r24, 0x04	; 4
    30dc:	8c 93       	st	X, r24
    30de:	1c c0       	rjmp	.+56     	; 0x3118 <Timer1_init+0xc4>

	}


	else if((Config_Ptr->mode)==Compare_Mode)
    30e0:	e9 81       	ldd	r30, Y+1	; 0x01
    30e2:	fa 81       	ldd	r31, Y+2	; 0x02
    30e4:	85 81       	ldd	r24, Z+5	; 0x05
    30e6:	81 30       	cpi	r24, 0x01	; 1
    30e8:	b9 f4       	brne	.+46     	; 0x3118 <Timer1_init+0xc4>
		 * 4. Normal Mode COM1B0=0 & COM1B1=0
		 */


		/* Timer1 operates in CTC Mode */
		TCCR1B|=(1<<WGM12);
    30ea:	ae e4       	ldi	r26, 0x4E	; 78
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	ee e4       	ldi	r30, 0x4E	; 78
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	88 60       	ori	r24, 0x08	; 8
    30f6:	8c 93       	st	X, r24


		/*Output Compare Register contain a 16-bit value that is continuously compared with the
	      counter value (TCNT1)*/

		OCR1A=Config_Ptr->compare_value;
    30f8:	aa e4       	ldi	r26, 0x4A	; 74
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e9 81       	ldd	r30, Y+1	; 0x01
    30fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	9c 93       	st	X, r25
    3108:	8e 93       	st	-X, r24

		/*Timer1 Compare Mode Interrupt Enable*/
		TIMSK|=(1<<OCIE1A);
    310a:	a9 e5       	ldi	r26, 0x59	; 89
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e9 e5       	ldi	r30, 0x59	; 89
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	80 61       	ori	r24, 0x10	; 16
    3116:	8c 93       	st	X, r24
	}
}
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <Timer1_deInit>:
/* Function to de-initialize timer1*/
void Timer1_deInit(void)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
	/*Clear all the registers values and disable interrupts' enable*/
	TCCR1A=0;
    312a:	ef e4       	ldi	r30, 0x4F	; 79
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	10 82       	st	Z, r1
	TCCR1B=0;
    3130:	ee e4       	ldi	r30, 0x4E	; 78
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	10 82       	st	Z, r1
	TCNT1=0;
    3136:	ec e4       	ldi	r30, 0x4C	; 76
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	11 82       	std	Z+1, r1	; 0x01
    313c:	10 82       	st	Z, r1
	OCR1A=0;
    313e:	ea e4       	ldi	r30, 0x4A	; 74
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	11 82       	std	Z+1, r1	; 0x01
    3144:	10 82       	st	Z, r1
	TIMSK&=0xC3;
    3146:	a9 e5       	ldi	r26, 0x59	; 89
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e9 e5       	ldi	r30, 0x59	; 89
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	83 7c       	andi	r24, 0xC3	; 195
    3152:	8c 93       	st	X, r24
	cli();
    3154:	f8 94       	cli

}
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <Timer1_setCallBack>:
/*Function to set ISR call back function*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <Timer1_setCallBack+0x6>
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	9a 83       	std	Y+2, r25	; 0x02
    3168:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr=a_ptr;
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	90 93 4a 01 	sts	0x014A, r25
    3172:	80 93 49 01 	sts	0x0149, r24
}
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *UART_Config)
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	00 d0       	rcall	.+0      	; 0x3186 <UART_init+0x6>
    3186:	00 d0       	rcall	.+0      	; 0x3188 <UART_init+0x8>
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    3190:	1a 82       	std	Y+2, r1	; 0x02
    3192:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3194:	eb e2       	ldi	r30, 0x2B	; 43
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	80 83       	st	Z, r24
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    319c:	aa e2       	ldi	r26, 0x2A	; 42
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	ea e2       	ldi	r30, 0x2A	; 42
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	88 69       	ori	r24, 0x98	; 152
    31a8:	8c 93       	st	X, r24
	UCSRC|=(1<<URSEL);
    31aa:	a0 e4       	ldi	r26, 0x40	; 64
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e0 e4       	ldi	r30, 0x40	; 64
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	80 68       	ori	r24, 0x80	; 128
    31b6:	8c 93       	st	X, r24


	if(UART_Config->parity==Even)
    31b8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ba:	fc 81       	ldd	r31, Y+4	; 0x04
    31bc:	81 81       	ldd	r24, Z+1	; 0x01
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	41 f4       	brne	.+16     	; 0x31d2 <UART_init+0x52>
	{
		UCSRC|=(1<<UPM1);
    31c2:	a0 e4       	ldi	r26, 0x40	; 64
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e0 e4       	ldi	r30, 0x40	; 64
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	80 62       	ori	r24, 0x20	; 32
    31ce:	8c 93       	st	X, r24
    31d0:	0c c0       	rjmp	.+24     	; 0x31ea <UART_init+0x6a>
	}
	else if(UART_Config->parity==Odd)
    31d2:	eb 81       	ldd	r30, Y+3	; 0x03
    31d4:	fc 81       	ldd	r31, Y+4	; 0x04
    31d6:	81 81       	ldd	r24, Z+1	; 0x01
    31d8:	88 23       	and	r24, r24
    31da:	39 f4       	brne	.+14     	; 0x31ea <UART_init+0x6a>
		UCSRC|=(1<<UPM1)|(1<<UPM0);
    31dc:	a0 e4       	ldi	r26, 0x40	; 64
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e0 e4       	ldi	r30, 0x40	; 64
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	80 63       	ori	r24, 0x30	; 48
    31e8:	8c 93       	st	X, r24

	if(UART_Config->stop_bit==UART_STOP_2BIT_SELECT)
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	81 30       	cpi	r24, 0x01	; 1
    31f2:	39 f4       	brne	.+14     	; 0x3202 <UART_init+0x82>
	{
		UCSRC|=(1<<USBS);
    31f4:	a0 e4       	ldi	r26, 0x40	; 64
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e0 e4       	ldi	r30, 0x40	; 64
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	88 60       	ori	r24, 0x08	; 8
    3200:	8c 93       	st	X, r24
	else
	{

	}

	if(UART_Config->bit_data==CHARACTER_SIZE_5)
    3202:	eb 81       	ldd	r30, Y+3	; 0x03
    3204:	fc 81       	ldd	r31, Y+4	; 0x04
    3206:	80 81       	ld	r24, Z
    3208:	85 30       	cpi	r24, 0x05	; 5
    320a:	b1 f4       	brne	.+44     	; 0x3238 <UART_init+0xb8>
	{
		UCSRC&=~(1<<UCSZ0);
    320c:	a0 e4       	ldi	r26, 0x40	; 64
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e0 e4       	ldi	r30, 0x40	; 64
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	8d 7f       	andi	r24, 0xFD	; 253
    3218:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ1);
    321a:	a0 e4       	ldi	r26, 0x40	; 64
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e0 e4       	ldi	r30, 0x40	; 64
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	8b 7f       	andi	r24, 0xFB	; 251
    3226:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    3228:	aa e2       	ldi	r26, 0x2A	; 42
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	ea e2       	ldi	r30, 0x2A	; 42
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	8b 7f       	andi	r24, 0xFB	; 251
    3234:	8c 93       	st	X, r24
    3236:	6b c0       	rjmp	.+214    	; 0x330e <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_6)
    3238:	eb 81       	ldd	r30, Y+3	; 0x03
    323a:	fc 81       	ldd	r31, Y+4	; 0x04
    323c:	80 81       	ld	r24, Z
    323e:	86 30       	cpi	r24, 0x06	; 6
    3240:	b1 f4       	brne	.+44     	; 0x326e <UART_init+0xee>
	{
		UCSRC|=(1<<UCSZ0);
    3242:	a0 e4       	ldi	r26, 0x40	; 64
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e0 e4       	ldi	r30, 0x40	; 64
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	82 60       	ori	r24, 0x02	; 2
    324e:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ1);
    3250:	a0 e4       	ldi	r26, 0x40	; 64
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	e0 e4       	ldi	r30, 0x40	; 64
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	8b 7f       	andi	r24, 0xFB	; 251
    325c:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    325e:	aa e2       	ldi	r26, 0x2A	; 42
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	ea e2       	ldi	r30, 0x2A	; 42
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	8b 7f       	andi	r24, 0xFB	; 251
    326a:	8c 93       	st	X, r24
    326c:	50 c0       	rjmp	.+160    	; 0x330e <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_7)
    326e:	eb 81       	ldd	r30, Y+3	; 0x03
    3270:	fc 81       	ldd	r31, Y+4	; 0x04
    3272:	80 81       	ld	r24, Z
    3274:	87 30       	cpi	r24, 0x07	; 7
    3276:	b1 f4       	brne	.+44     	; 0x32a4 <UART_init+0x124>
	{
		UCSRC|=(1<<UCSZ1);
    3278:	a0 e4       	ldi	r26, 0x40	; 64
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e0 e4       	ldi	r30, 0x40	; 64
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	84 60       	ori	r24, 0x04	; 4
    3284:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ0);
    3286:	a0 e4       	ldi	r26, 0x40	; 64
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e0 e4       	ldi	r30, 0x40	; 64
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	8d 7f       	andi	r24, 0xFD	; 253
    3292:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    3294:	aa e2       	ldi	r26, 0x2A	; 42
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	ea e2       	ldi	r30, 0x2A	; 42
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	8b 7f       	andi	r24, 0xFB	; 251
    32a0:	8c 93       	st	X, r24
    32a2:	35 c0       	rjmp	.+106    	; 0x330e <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_8)
    32a4:	eb 81       	ldd	r30, Y+3	; 0x03
    32a6:	fc 81       	ldd	r31, Y+4	; 0x04
    32a8:	80 81       	ld	r24, Z
    32aa:	88 30       	cpi	r24, 0x08	; 8
    32ac:	b1 f4       	brne	.+44     	; 0x32da <UART_init+0x15a>
	{
		UCSRC|=(1<<UCSZ0);
    32ae:	a0 e4       	ldi	r26, 0x40	; 64
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e0 e4       	ldi	r30, 0x40	; 64
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	82 60       	ori	r24, 0x02	; 2
    32ba:	8c 93       	st	X, r24
		UCSRC|=(1<<UCSZ1);
    32bc:	a0 e4       	ldi	r26, 0x40	; 64
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e0 e4       	ldi	r30, 0x40	; 64
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	84 60       	ori	r24, 0x04	; 4
    32c8:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    32ca:	aa e2       	ldi	r26, 0x2A	; 42
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	ea e2       	ldi	r30, 0x2A	; 42
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	8b 7f       	andi	r24, 0xFB	; 251
    32d6:	8c 93       	st	X, r24
    32d8:	1a c0       	rjmp	.+52     	; 0x330e <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_9)
    32da:	eb 81       	ldd	r30, Y+3	; 0x03
    32dc:	fc 81       	ldd	r31, Y+4	; 0x04
    32de:	80 81       	ld	r24, Z
    32e0:	89 30       	cpi	r24, 0x09	; 9
    32e2:	a9 f4       	brne	.+42     	; 0x330e <UART_init+0x18e>
	{
		UCSRC|=(1<<UCSZ0);
    32e4:	a0 e4       	ldi	r26, 0x40	; 64
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e0 e4       	ldi	r30, 0x40	; 64
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	82 60       	ori	r24, 0x02	; 2
    32f0:	8c 93       	st	X, r24
		UCSRC|=(1<<UCSZ1);
    32f2:	a0 e4       	ldi	r26, 0x40	; 64
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e0 e4       	ldi	r30, 0x40	; 64
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	84 60       	ori	r24, 0x04	; 4
    32fe:	8c 93       	st	X, r24
		UCSRB|=(1<<UCSZ2);
    3300:	aa e2       	ldi	r26, 0x2A	; 42
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	ea e2       	ldi	r30, 0x2A	; 42
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	84 60       	ori	r24, 0x04	; 4
    330c:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    330e:	eb 81       	ldd	r30, Y+3	; 0x03
    3310:	fc 81       	ldd	r31, Y+4	; 0x04
    3312:	83 81       	ldd	r24, Z+3	; 0x03
    3314:	94 81       	ldd	r25, Z+4	; 0x04
    3316:	a5 81       	ldd	r26, Z+5	; 0x05
    3318:	b6 81       	ldd	r27, Z+6	; 0x06
    331a:	88 0f       	add	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	aa 1f       	adc	r26, r26
    3320:	bb 1f       	adc	r27, r27
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	aa 1f       	adc	r26, r26
    3328:	bb 1f       	adc	r27, r27
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	aa 1f       	adc	r26, r26
    3330:	bb 1f       	adc	r27, r27
    3332:	9c 01       	movw	r18, r24
    3334:	ad 01       	movw	r20, r26
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	92 e1       	ldi	r25, 0x12	; 18
    333a:	aa e7       	ldi	r26, 0x7A	; 122
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__udivmodsi4>
    3346:	da 01       	movw	r26, r20
    3348:	c9 01       	movw	r24, r18
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	9a 83       	std	Y+2, r25	; 0x02
    334e:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3350:	e0 e4       	ldi	r30, 0x40	; 64
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	89 2f       	mov	r24, r25
    335a:	99 27       	eor	r25, r25
    335c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    335e:	e9 e2       	ldi	r30, 0x29	; 41
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	80 83       	st	Z, r24

}
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3380:	eb e2       	ldi	r30, 0x2B	; 43
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	80 72       	andi	r24, 0x20	; 32
    338c:	90 70       	andi	r25, 0x00	; 0
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	b9 f3       	breq	.-18     	; 0x3380 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3392:	ec e2       	ldi	r30, 0x2C	; 44
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    33aa:	eb e2       	ldi	r30, 0x2B	; 43
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	88 23       	and	r24, r24
    33b2:	dc f7       	brge	.-10     	; 0x33aa <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    33b4:	ec e2       	ldi	r30, 0x2C	; 44
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
}
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	08 95       	ret

000033c0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    33c0:	df 93       	push	r29
    33c2:	cf 93       	push	r28
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <UART_sendString+0x6>
    33c6:	0f 92       	push	r0
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	9b 83       	std	Y+3, r25	; 0x03
    33ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33d0:	19 82       	std	Y+1, r1	; 0x01
    33d2:	0e c0       	rjmp	.+28     	; 0x33f0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	9b 81       	ldd	r25, Y+3	; 0x03
    33de:	fc 01       	movw	r30, r24
    33e0:	e2 0f       	add	r30, r18
    33e2:	f3 1f       	adc	r31, r19
    33e4:	80 81       	ld	r24, Z
    33e6:	0e 94 ba 19 	call	0x3374	; 0x3374 <UART_sendByte>
		i++;
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	8f 5f       	subi	r24, 0xFF	; 255
    33ee:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	fc 01       	movw	r30, r24
    33fc:	e2 0f       	add	r30, r18
    33fe:	f3 1f       	adc	r31, r19
    3400:	80 81       	ld	r24, Z
    3402:	88 23       	and	r24, r24
    3404:	39 f7       	brne	.-50     	; 0x33d4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	00 d0       	rcall	.+0      	; 0x341c <UART_receiveString+0xa>
    341c:	0f 92       	push	r0
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	9b 83       	std	Y+3, r25	; 0x03
    3424:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3426:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	8c 01       	movw	r16, r24
    3434:	02 0f       	add	r16, r18
    3436:	13 1f       	adc	r17, r19
    3438:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    343c:	f8 01       	movw	r30, r16
    343e:	80 83       	st	Z, r24
    3440:	0f c0       	rjmp	.+30     	; 0x3460 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	9b 81       	ldd	r25, Y+3	; 0x03
    3452:	8c 01       	movw	r16, r24
    3454:	02 0f       	add	r16, r18
    3456:	13 1f       	adc	r17, r19
    3458:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <UART_recieveByte>
    345c:	f8 01       	movw	r30, r16
    345e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	9b 81       	ldd	r25, Y+3	; 0x03
    346a:	fc 01       	movw	r30, r24
    346c:	e2 0f       	add	r30, r18
    346e:	f3 1f       	adc	r31, r19
    3470:	80 81       	ld	r24, Z
    3472:	83 32       	cpi	r24, 0x23	; 35
    3474:	31 f7       	brne	.-52     	; 0x3442 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	28 2f       	mov	r18, r24
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	9b 81       	ldd	r25, Y+3	; 0x03
    3480:	fc 01       	movw	r30, r24
    3482:	e2 0f       	add	r30, r18
    3484:	f3 1f       	adc	r31, r19
    3486:	10 82       	st	Z, r1
}
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	08 95       	ret

00003498 <__udivmodsi4>:
    3498:	a1 e2       	ldi	r26, 0x21	; 33
    349a:	1a 2e       	mov	r1, r26
    349c:	aa 1b       	sub	r26, r26
    349e:	bb 1b       	sub	r27, r27
    34a0:	fd 01       	movw	r30, r26
    34a2:	0d c0       	rjmp	.+26     	; 0x34be <__udivmodsi4_ep>

000034a4 <__udivmodsi4_loop>:
    34a4:	aa 1f       	adc	r26, r26
    34a6:	bb 1f       	adc	r27, r27
    34a8:	ee 1f       	adc	r30, r30
    34aa:	ff 1f       	adc	r31, r31
    34ac:	a2 17       	cp	r26, r18
    34ae:	b3 07       	cpc	r27, r19
    34b0:	e4 07       	cpc	r30, r20
    34b2:	f5 07       	cpc	r31, r21
    34b4:	20 f0       	brcs	.+8      	; 0x34be <__udivmodsi4_ep>
    34b6:	a2 1b       	sub	r26, r18
    34b8:	b3 0b       	sbc	r27, r19
    34ba:	e4 0b       	sbc	r30, r20
    34bc:	f5 0b       	sbc	r31, r21

000034be <__udivmodsi4_ep>:
    34be:	66 1f       	adc	r22, r22
    34c0:	77 1f       	adc	r23, r23
    34c2:	88 1f       	adc	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	1a 94       	dec	r1
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <__udivmodsi4_loop>
    34ca:	60 95       	com	r22
    34cc:	70 95       	com	r23
    34ce:	80 95       	com	r24
    34d0:	90 95       	com	r25
    34d2:	9b 01       	movw	r18, r22
    34d4:	ac 01       	movw	r20, r24
    34d6:	bd 01       	movw	r22, r26
    34d8:	cf 01       	movw	r24, r30
    34da:	08 95       	ret

000034dc <__prologue_saves__>:
    34dc:	2f 92       	push	r2
    34de:	3f 92       	push	r3
    34e0:	4f 92       	push	r4
    34e2:	5f 92       	push	r5
    34e4:	6f 92       	push	r6
    34e6:	7f 92       	push	r7
    34e8:	8f 92       	push	r8
    34ea:	9f 92       	push	r9
    34ec:	af 92       	push	r10
    34ee:	bf 92       	push	r11
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	ca 1b       	sub	r28, r26
    3506:	db 0b       	sbc	r29, r27
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	09 94       	ijmp

00003514 <__epilogue_restores__>:
    3514:	2a 88       	ldd	r2, Y+18	; 0x12
    3516:	39 88       	ldd	r3, Y+17	; 0x11
    3518:	48 88       	ldd	r4, Y+16	; 0x10
    351a:	5f 84       	ldd	r5, Y+15	; 0x0f
    351c:	6e 84       	ldd	r6, Y+14	; 0x0e
    351e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3520:	8c 84       	ldd	r8, Y+12	; 0x0c
    3522:	9b 84       	ldd	r9, Y+11	; 0x0b
    3524:	aa 84       	ldd	r10, Y+10	; 0x0a
    3526:	b9 84       	ldd	r11, Y+9	; 0x09
    3528:	c8 84       	ldd	r12, Y+8	; 0x08
    352a:	df 80       	ldd	r13, Y+7	; 0x07
    352c:	ee 80       	ldd	r14, Y+6	; 0x06
    352e:	fd 80       	ldd	r15, Y+5	; 0x05
    3530:	0c 81       	ldd	r16, Y+4	; 0x04
    3532:	1b 81       	ldd	r17, Y+3	; 0x03
    3534:	aa 81       	ldd	r26, Y+2	; 0x02
    3536:	b9 81       	ldd	r27, Y+1	; 0x01
    3538:	ce 0f       	add	r28, r30
    353a:	d1 1d       	adc	r29, r1
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	ed 01       	movw	r28, r26
    3548:	08 95       	ret

0000354a <itoa>:
    354a:	fb 01       	movw	r30, r22
    354c:	9f 01       	movw	r18, r30
    354e:	e8 94       	clt
    3550:	42 30       	cpi	r20, 0x02	; 2
    3552:	c4 f0       	brlt	.+48     	; 0x3584 <itoa+0x3a>
    3554:	45 32       	cpi	r20, 0x25	; 37
    3556:	b4 f4       	brge	.+44     	; 0x3584 <itoa+0x3a>
    3558:	4a 30       	cpi	r20, 0x0A	; 10
    355a:	29 f4       	brne	.+10     	; 0x3566 <itoa+0x1c>
    355c:	97 fb       	bst	r25, 7
    355e:	1e f4       	brtc	.+6      	; 0x3566 <itoa+0x1c>
    3560:	90 95       	com	r25
    3562:	81 95       	neg	r24
    3564:	9f 4f       	sbci	r25, 0xFF	; 255
    3566:	64 2f       	mov	r22, r20
    3568:	77 27       	eor	r23, r23
    356a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__udivmodhi4>
    356e:	80 5d       	subi	r24, 0xD0	; 208
    3570:	8a 33       	cpi	r24, 0x3A	; 58
    3572:	0c f0       	brlt	.+2      	; 0x3576 <itoa+0x2c>
    3574:	89 5d       	subi	r24, 0xD9	; 217
    3576:	81 93       	st	Z+, r24
    3578:	cb 01       	movw	r24, r22
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	a1 f7       	brne	.-24     	; 0x3566 <itoa+0x1c>
    357e:	16 f4       	brtc	.+4      	; 0x3584 <itoa+0x3a>
    3580:	5d e2       	ldi	r21, 0x2D	; 45
    3582:	51 93       	st	Z+, r21
    3584:	10 82       	st	Z, r1
    3586:	c9 01       	movw	r24, r18
    3588:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <strrev>

0000358c <strrev>:
    358c:	dc 01       	movw	r26, r24
    358e:	fc 01       	movw	r30, r24
    3590:	67 2f       	mov	r22, r23
    3592:	71 91       	ld	r23, Z+
    3594:	77 23       	and	r23, r23
    3596:	e1 f7       	brne	.-8      	; 0x3590 <strrev+0x4>
    3598:	32 97       	sbiw	r30, 0x02	; 2
    359a:	04 c0       	rjmp	.+8      	; 0x35a4 <strrev+0x18>
    359c:	7c 91       	ld	r23, X
    359e:	6d 93       	st	X+, r22
    35a0:	70 83       	st	Z, r23
    35a2:	62 91       	ld	r22, -Z
    35a4:	ae 17       	cp	r26, r30
    35a6:	bf 07       	cpc	r27, r31
    35a8:	c8 f3       	brcs	.-14     	; 0x359c <strrev+0x10>
    35aa:	08 95       	ret

000035ac <__udivmodhi4>:
    35ac:	aa 1b       	sub	r26, r26
    35ae:	bb 1b       	sub	r27, r27
    35b0:	51 e1       	ldi	r21, 0x11	; 17
    35b2:	07 c0       	rjmp	.+14     	; 0x35c2 <__udivmodhi4_ep>

000035b4 <__udivmodhi4_loop>:
    35b4:	aa 1f       	adc	r26, r26
    35b6:	bb 1f       	adc	r27, r27
    35b8:	a6 17       	cp	r26, r22
    35ba:	b7 07       	cpc	r27, r23
    35bc:	10 f0       	brcs	.+4      	; 0x35c2 <__udivmodhi4_ep>
    35be:	a6 1b       	sub	r26, r22
    35c0:	b7 0b       	sbc	r27, r23

000035c2 <__udivmodhi4_ep>:
    35c2:	88 1f       	adc	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	5a 95       	dec	r21
    35c8:	a9 f7       	brne	.-22     	; 0x35b4 <__udivmodhi4_loop>
    35ca:	80 95       	com	r24
    35cc:	90 95       	com	r25
    35ce:	bc 01       	movw	r22, r24
    35d0:	cd 01       	movw	r24, r26
    35d2:	08 95       	ret

000035d4 <_exit>:
    35d4:	f8 94       	cli

000035d6 <__stop_program>:
    35d6:	ff cf       	rjmp	.-2      	; 0x35d6 <__stop_program>
